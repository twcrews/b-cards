{"version":3,"sources":["components/EmptyState.js","components/BCard.js","components/DeckView.js","components/CardEdit.js","components/GridView.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["EmptyState","props","className","style","fontSize","variant","children","onClick","color","startIcon","buttonIcon","button","BCard","Card","elevation","square","Typography","flipped","number","count","Button","flagged","onFlag","size","disableElevation","ReactHtmlParser","content","borderTop","padding","textAlign","onFlip","DeckView","useState","setFlipped","selectedCard","setSelectedCard","cardIn","setCardIn","slideDirection","setSlideDirection","displayCard","activeId","card","deck","cards","id","lastCard","length","isLastCard","isFirstCard","discreetFlip","callback","handleFlip","handleCardChange","onCardChange","handleAdvanceCard","setTimeout","c","handleReverseCard","handleJumpToEnd","handleJumpToStart","addCard","frontContent","backContent","onAddCard","handleDuplicateCard","front","back","handleFlagToggle","flaggedOnly","handleKeyPress","event","focus","key","preventDefault","stopPropagation","useEffect","window","addEventListener","removeEventListener","controls","ButtonGroup","disabled","shuffled","onShuffle","filter","onFlaggedOnly","endIcon","Slide","in","direction","height","isFlipped","flipDirection","flipSpeedBackToFront","flipSpeedFrontToBack","onEditorChange","onDuplicate","CardEdit","focused","setFocused","document","getElementById","map","side","toUpperCase","handleFocus","inline","editor","_editor","onChange","handleEditorChange","onKeyDown","onKeyUp","onBlur","handleBlur","value","init","menubar","toolbar","content_style","title","tmpVal","onDelete","GridView","handleFlag","marginBottom","index","handleDelete","display","justifyContent","marginTop","gap","Add","SwapHoriz","onSwapAll","Slideshow","onViewCards","App","setDeck","drawer","setDrawer","newDeckDialog","setNewDeckDialog","duplicateDeckDialog","setDuplicateDeckDialog","renameDeckDialog","setRenameDeckDialog","deleteDeckDialog","setDeleteDeckDialog","newDeckName","setNewDeckName","renameDeckName","setRenameDeckName","openNewDeck","setOpenNewDeck","setFlaggedOnly","setShuffled","editing","setEditing","freeView","uuid","replace","Math","random","toString","allStorage","storage","keys","Object","localStorage","i","push","JSON","parse","getItem","formattedDate","date","Date","toLocaleString","month","day","year","hour","minute","writeDeck","newDeck","modified","setItem","stringify","handleNewDeck","handleNewDeckDialogClose","handleDuplicateDeckDialogClose","handleNewDeckNameChange","text","target","substr","handleDeckSelected","handleRenameDeckDialogClose","handleDeleteDeckDialogClose","handleDeleteDeckConfirm","removeItem","handleDeleteCard","tmpDeck","splice","handleFlaggedOnlyToggle","find","f","handleToggleEdit","emptyDrawer","deleteDeckDialogContent","open","onClose","name","newDeckDialogContent","onSubmit","trim","deckName","newId","newObj","created","addDeck","autoFocus","label","type","duplicateDeckDialogContent","control","checked","renameDeckDialogContent","drawerContent","sort","a","b","d","selected","primary","secondary","primaryTypographyProps","noWrap","fullWidth","emptyState","viewContent","visibleDeck","array","temporaryValue","randomIndex","currentIndex","floor","shuffle","visibleCards","s","onDeleteCard","forEach","tmpContent","appMenuContent","opacity","edge","position","width","alignItems","src","alt","Fragment","anchor","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.4dddd5ae.chunk.js","sourcesContent":["import React from 'react';\nimport SearchIcon from '@material-ui/icons/Search';\nimport * as M from '@material-ui/core';\n\nexport default function EmptyState(props) {\n    return (\n        <div className=\"EmptyState\">\n            <SearchIcon style={{ fontSize: 200 }}/>\n            <M.Typography\n                variant=\"h6\"\n            >\n                {props.children}\n            </M.Typography>\n            <M.Button \n                variant=\"contained\" \n                onClick={props.onClick}\n                color=\"primary\"\n                startIcon={props.buttonIcon}\n            >\n                {props.button}\n            </M.Button>\n        </div>\n    );\n}","import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport { Button, Typography } from '@material-ui/core';\nimport * as Icon from '@material-ui/icons';\nimport ReactHtmlParser from 'react-html-parser';\n\nexport default function BCard(props) {\n    const handleFlagToggle = () => { props.onFlag(); }\n\n    return (\n        <Card elevation={3} square className=\"Card\">\n            <div className=\"CardHeader BorderBox CenterVertical\">\n                <div className=\"EvenFlex LeftAlign\">\n                    <span>\n                        <Typography variant=\"subtitle1\" className=\"GrayText\">\n                            {props.flipped ? \"BACK\" : \"FRONT\"}\n                        </Typography>\n                    </span>\n                </div>\n                <div className=\"EvenFlex CenterAlign\">\n                    <span>\n                        <Typography variant=\"h6\">\n                            {props.number + \" of \" + props.count}\n                        </Typography>\n                    </span>\n                </div>\n                <div className=\"EvenFlex RightAlign\">\n                    <span>\n                        <Button\n                            className={props.flagged ? \"FlagButtonActive\" : \"\"}\n                            variant={props.flagged ? \"contained\" : \"text\"}\n                            startIcon={<Icon.Flag color=\"inherit\" />}\n                            onClick={handleFlagToggle}\n                            size=\"large\"\n                            disableElevation\n                        >\n                            {props.flagged ? \"Flagged\" : \"Flag\"}\n                        </Button>\n                    </span>\n                </div>\n            </div>\n            <div className=\"CardContent\">\n                <div>{ReactHtmlParser(props.content)}</div>\n            </div>\n            <div style={{\n                borderTop: \"1px solid #ddd\",\n                padding: \"20px 40px\",\n                textAlign: \"center\"\n            }}>\n                <Button\n                    onClick={props.onFlip}\n                    startIcon={<Icon.Refresh />}\n                    size=\"large\"\n                >\n                    Flip\n                    </Button>\n            </div>\n        </Card>\n    );\n}","import React, { useState, useEffect } from 'react';\nimport {\n    Button,\n    ButtonGroup,\n    Slide\n} from '@material-ui/core';\nimport * as Icon from '@material-ui/icons';\nimport BCard from './BCard.js';\nimport ReactCardFlip from 'react-card-flip';\n\nexport default function DeckView(props) {\n    const [flipped, setFlipped] = useState(false);\n    const [selectedCard, setSelectedCard] = useState(0);\n    const [cardIn, setCardIn] = useState(true);\n    const [slideDirection, setSlideDirection] = useState(null);\n\n    const displayCard = () => selectedCard + 1;\n    const activeId = () => {\n        let card = props.deck.cards[selectedCard];\n        return card ? card.id : 0;\n    }\n\n    const lastCard = () => props.deck.cards.length - 1;\n\n    const isLastCard = selectedCard === props.deck.cards.length - 1;\n    const isFirstCard = selectedCard === 0;\n\n    const discreetFlip = (callback) => {\n        if (flipped) {\n            setFlipped(false);\n            callback();\n        } else {\n            callback();\n        }\n    }\n    const handleFlip = () => { setFlipped(!flipped); };\n    const handleCardChange = (content) => {\n        props.onCardChange(content, activeId(), flipped);\n    };\n\n    const handleAdvanceCard = () => {\n        setSlideDirection(\"right\");\n        setCardIn(false);\n        discreetFlip(() => setTimeout(() => {\n            setSlideDirection(\"left\");\n            setCardIn(true);\n            setSelectedCard(c => c < lastCard() ? \n                c + 1 : lastCard());\n        }, 230));\n    };\n    const handleReverseCard = () => {\n        setSlideDirection(\"left\");\n        setCardIn(false);\n        discreetFlip(() => setTimeout(() => {\n            setSlideDirection(\"right\");\n            setCardIn(true);\n            setSelectedCard(c => c > 0 ? c - 1 : 0);\n        }, 230));\n    };\n    const handleJumpToEnd = () => {\n        setSlideDirection(\"right\");\n        setCardIn(false);\n        discreetFlip(() => setTimeout(() => {\n            setSlideDirection(\"left\");\n            setCardIn(true);\n            setSelectedCard(props.deck.cards.length - 1);\n        }, 230));\n    };\n    const handleJumpToStart = () => {\n        setSlideDirection(\"left\");\n        setCardIn(false);\n        discreetFlip(() => setTimeout(() => {\n            setSlideDirection(\"right\");\n            setCardIn(true);\n            setSelectedCard(0);\n        }, 230));\n    };\n    const addCard = (frontContent, backContent) => {\n        setFlipped(false);\n        props.onAddCard(frontContent, backContent);\n        setSelectedCard(props.deck.cards.length - 1)\n    }\n    const handleAddCard = () => { addCard(\"\", \"\"); };\n    const handleDuplicateCard = () => {\n        addCard(props.deck.cards[selectedCard].front,\n            props.deck.cards[selectedCard].back);\n    };\n    const handleFlagToggle = () => {\n        if (props.flaggedOnly &&\n            props.deck.cards.length - 1 === selectedCard) {\n            setSelectedCard(c => c === 0 ? 0 : c - 1);\n        }\n        props.onFlag(activeId());\n    };\n    const handleFlaggedOnlyToggle = () => {\n        discreetFlip(() => setSelectedCard(0));\n        props.onFlaggedOnly();\n    };\n    const handleShuffleToggle = () => {\n        discreetFlip(() => setSelectedCard(0));\n        props.onShuffle();\n    }\n    const handleKeyPress = (event) => {\n        if (props.focus) {\n            switch (event.key) {\n                case \"ArrowLeft\":\n                    if (!isFirstCard) {\n                        handleReverseCard();\n                    }\n                    break;\n                case \"ArrowRight\":\n                    if (!isLastCard) {\n                        handleAdvanceCard();\n                    }\n                    break;\n                case \"ArrowUp\":\n                    if (!isFirstCard) {\n                        handleJumpToStart();\n                    }\n                    break;\n                case \"ArrowDown\":\n                    if (!isLastCard) {\n                        handleJumpToEnd();\n                    }\n                    break;\n                case \" \":\n                    event.preventDefault();\n                    event.stopPropagation();\n                    handleFlip();\n                    break;\n                default: break;\n            }\n        }\n    };\n\n    useEffect(() => {\n        window.addEventListener(\"keydown\", handleKeyPress);\n        return () => window.removeEventListener(\"keydown\", handleKeyPress);\n    });\n\n    const controls = (\n        <div className=\"DeckControls\">\n            <ButtonGroup>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    startIcon={<Icon.FirstPage />}\n                    disabled={isFirstCard}\n                    onClick={handleJumpToStart}\n                >\n                    First\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    startIcon={<Icon.ArrowBack />}\n                    disabled={isFirstCard}\n                    onClick={handleReverseCard}\n                >\n                    Back\n                </Button>\n            </ButtonGroup>\n            <ButtonGroup>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    startIcon={props.shuffled ?\n                        <Icon.CheckBox /> :\n                        <Icon.CheckBoxOutlineBlank />}\n                    disabled={props.deck.cards.length === 1}\n                    onClick={handleShuffleToggle}\n                >\n                    Shuffle\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    startIcon={props.flaggedOnly ?\n                        <Icon.CheckBox /> :\n                        <Icon.CheckBoxOutlineBlank />}\n                    disabled={props.deck.cards.filter(c => c.flagged).length < 1}\n                    onClick={handleFlaggedOnlyToggle}\n                >\n                    Flagged Only\n                </Button>\n            </ButtonGroup>\n            <ButtonGroup>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    endIcon={<Icon.ArrowForward />}\n                    disabled={isLastCard}\n                    onClick={handleAdvanceCard}\n                >\n                    Next\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    endIcon={<Icon.LastPage />}\n                    disabled={isLastCard}\n                    onClick={handleJumpToEnd}\n                >\n                    Last\n                </Button>\n            </ButtonGroup>\n        </div>\n    );\n\n    useEffect(() => {\n        setSelectedCard(0);\n        setFlipped(false);\n    }, [props.deck.id]);\n\n    return (\n        <div className=\"DeckView\">\n            <div className=\"CardSpace\">\n                <Slide \n                    in={cardIn}\n                    direction={slideDirection}>\n                    <div\n                        style={{height: \"100%\"}}>\n                    <ReactCardFlip\n                        isFlipped={flipped}\n                        flipDirection=\"vertical\"\n                        flipSpeedBackToFront={0.3}\n                        flipSpeedFrontToBack={0.3}\n                    >\n                        <BCard\n                            id={activeId() + \"-front\"}\n                            flipped={false}\n                            onEditorChange={handleCardChange}\n                            onFlip={handleFlip}\n                            onDuplicate={handleDuplicateCard}\n                            number={displayCard()}\n                            count={props.deck.cards.length}\n                            content={props.deck.cards[selectedCard]?.front}\n                            flagged={props.deck.cards[selectedCard]?.flagged}\n                            onFlag={handleFlagToggle}\n                            flaggedOnly={props.flaggedOnly}\n                        />\n                        <BCard\n                            id={activeId() + \"-back\"}\n                            flipped={true}\n                            onEditorChange={handleCardChange}\n                            onFlip={handleFlip}\n                            onAddCard={handleAddCard}\n                            onDuplicate={handleDuplicateCard}\n                            number={displayCard()}\n                            count={props.deck.cards.length}\n                            content={props.deck.cards[selectedCard]?.back}\n                            flagged={props.deck.cards[selectedCard]?.flagged}\n                            onFlag={handleFlagToggle}\n                            flaggedOnly={props.flaggedOnly}\n                        />\n                    </ReactCardFlip>\n                    </div>\n                </Slide>\n            </div>\n            {controls}\n        </div>\n    );\n}","import React, { useState, useEffect } from 'react';\nimport { Editor } from '@tinymce/tinymce-react';\nimport * as Material from '@material-ui/core';\nimport * as Icon from '@material-ui/icons';\n\nexport function CardEdit(props) {\n    const [focused, setFocused] = useState(null);\n\n    const handleEditorChange = (content, _editor, side) => {\n        props.onChange(content, side);\n    };\n    const handleFlag = () => { props.onFlag(props.card.id); };\n    const handleClear = () => {\n        props.onChange(\"\", \"front\");\n        props.onChange(\"\", \"back\");\n    }\n    const handleDelete = () => { props.onDelete(props.card.id); };\n    const handleFocus = (side) => { setFocused(side); };\n    const handleBlur = (side) => {\n        if (focused === side) {\n            setFocused(null);\n        }\n    };\n    const handleSwap = () => {\n        let tmpVal = props.card[\"front\"];\n        props.onChange(props.card[\"back\"], \"front\");\n        props.onChange(tmpVal, \"back\");\n    }\n\n    useEffect(() => {\n        if (focused) {\n            document.getElementById(props.card.id + \"-\" + focused).focus();\n        }\n    }, [focused, props.card.id]);\n\n    return (\n        <div className=\"EditCardContainer\">\n            <div id={props.card.id} className=\"EditCardFlex\">\n                {[\"front\", \"back\"].map(side =>\n                    <Material.Card\n                        key={side}\n                        square\n                        elevation={3}\n                        className=\"EditCard\"\n                    >\n                        <Material.Typography\n                            style={{ color: \"#888\" }}\n                            variant=\"caption\"\n                        >\n                            {side.toUpperCase()}\n                        </Material.Typography>\n                        <div\n                            className=\"EditCardContent\"\n                            onClick={() => handleFocus(side)}\n                        >\n                            {focused !== side && (!props.card[side] || props.card[side] === \"\") ?\n                                <Material.Typography\n                                    variant=\"h5\"\n                                    className=\"CenterAbsolute GrayText\"\n                                >\n                                    No content\n                                </Material.Typography> :\n                                null}\n                            <Editor\n                                style={{ textAlign: \"center\" }}\n                                id={props.card.id + \"-\" + side}\n                                inline\n                                onEditorChange={(content, editor) => handleEditorChange(content, editor, side)}\n                                onKeyDown={(event) => event.stopPropagation()}\n                                onKeyUp={(event) => event.preventDefault()}\n                                onBlur={() => handleBlur(side)}\n                                value={props.card[side]}\n                                init={{\n                                    menubar: false,\n                                    toolbar: 'undo redo | fontsizeselect | bold italic backcolor | ' +\n                                        'alignleft aligncenter alignright alignjustify | ' +\n                                        'bullist numlist outdent indent | removeformat',\n                                    content_style: 'body { font-family: Roboto; font-size: 18pt; text-align: center}'\n                                }}\n                            />\n                        </div>\n                    </Material.Card>\n                )}\n            </div>\n            <div className=\"EditControls\">\n                <Material.Tooltip title=\"Flag card\">\n                    <Material.IconButton\n                        onClick={handleFlag}\n                        className={props.card.flagged ? \"FlagButtonActive\" : null}\n                    >\n                        <Icon.Flag />\n                    </Material.IconButton>\n                </Material.Tooltip>\n                <Material.Tooltip title=\"Swap content\">\n                    <Material.IconButton\n                        onClick={handleSwap}\n                    >\n                        <Icon.SwapHoriz />\n                    </Material.IconButton>\n                </Material.Tooltip>\n                <Material.Tooltip title=\"Clear content\">\n                    <Material.IconButton\n                        onClick={handleClear}\n                    >\n                        <Icon.Backspace />\n                    </Material.IconButton>\n                </Material.Tooltip>\n                <Material.Tooltip title=\"Delete card\">\n                    <Material.IconButton\n                        onClick={handleDelete}\n                    >\n                        <Icon.Delete />\n                    </Material.IconButton>\n                </Material.Tooltip> \n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport { CardEdit } from './CardEdit';\nimport { Button, ButtonGroup } from '@material-ui/core';\nimport { Add, SwapHoriz, Slideshow } from '@material-ui/icons';\n\nexport function GridView(props) {\n    const handleCardChange = (content, id, side) => {\n        props.onChange(content, id, side === \"back\");\n    };\n    const handleAddCard = () => { props.onAddCard(); };\n    const handleFlag = (id) => { props.onFlag(id); };\n    const handleDelete = (index) => { props.onDelete(index); };\n    const handleSwapAll = () => { props.onSwapAll(); };\n    const handleViewCards = () => { props.onViewCards(); };\n\n    return (\n        <div style={{ marginBottom: \"80px\" }}>\n            {props.deck.cards.map((card, index) =>\n                <CardEdit\n                    key={card.id}\n                    card={card}\n                    onChange={(content, side) =>\n                        handleCardChange(content, card.id, side)}\n                    onFlag={handleFlag}\n                    onDelete={() => handleDelete(index)}\n                />\n            )}\n            <div style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                marginTop: \"40px\",\n                gap: \"20px\"\n            }}>\n                <ButtonGroup>\n                    <Button\n                        size=\"large\"\n                        startIcon={<Add />}\n                        onClick={handleAddCard}\n                        variant=\"outlined\"\n                        color=\"primary\"\n                    >\n                        Add Card\n                    </Button>\n                    <Button\n                        size=\"large\"\n                        startIcon={<SwapHoriz />}\n                        onClick={handleSwapAll}\n                        variant=\"outlined\"\n                        color=\"primary\"\n                    >\n                        Swap All\n                    </Button>\n                </ButtonGroup>\n                <Button\n                    size=\"large\"\n                    startIcon={<Slideshow />}\n                    onClick={handleViewCards}\n                    variant=\"contained\"\n                    color=\"primary\"\n                >\n                    View Deck\n                </Button>\n            </div>\n        </div>);\n}","import React, { useState, useEffect } from 'react';\nimport * as Material from '@material-ui/core';\nimport * as Icon from '@material-ui/icons';\nimport './App.css';\nimport EmptyState from './components/EmptyState';\nimport DeckView from './components/DeckView';\nimport { GridView } from './components/GridView';\n\nfunction App() {\n  /********** STATES **********/\n  const [deck, setDeck] = useState(null);\n  const [drawer, setDrawer] = useState(false);\n  const [newDeckDialog, setNewDeckDialog] = useState(false);\n  const [duplicateDeckDialog, setDuplicateDeckDialog] = useState(false);\n  const [renameDeckDialog, setRenameDeckDialog] = useState(false);\n  const [deleteDeckDialog, setDeleteDeckDialog] = useState(false);\n  const [newDeckName, setNewDeckName] = useState('');\n  const [renameDeckName, setRenameDeckName] = useState('');\n  const [openNewDeck, setOpenNewDeck] = useState(false);\n  const [flaggedOnly, setFlaggedOnly] = useState(false);\n  const [shuffled, setShuffled] = useState(false);\n  const [editing, setEditing] = useState(false);\n\n\n  /********** CONSTANTS **********/\n  const freeView =\n    deck &&\n    !drawer &&\n    !newDeckDialog &&\n    !duplicateDeckDialog &&\n    !renameDeckDialog &&\n    !deleteDeckDialog;\n\n\n  /********** FUNCTIONS **********/\n  const uuid = () => {\n    return 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'.replace(/x/g, function (c) {\n      return (Math.random() * 16 | 0).toString(16);\n    });\n  };\n\n  const shuffle = (array) => {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  };\n\n  const allStorage = () => {\n    var storage = [],\n      keys = Object.keys(localStorage),\n      i = keys.length;\n\n    while (i--) {\n      if (keys[i] !== \"lastOpen\") {\n        storage.push(JSON.parse(localStorage.getItem(keys[i])));\n      }\n    }\n    return storage;\n  };\n\n  const formattedDate = (date) => {\n    return (new Date(date)).toLocaleString(\n      [], {\n      month: 'numeric',\n      day: 'numeric',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const writeDeck = (newDeck) => {\n    newDeck.modified = new Date();\n    setDeck(newDeck);\n    localStorage.setItem(newDeck.id, JSON.stringify(newDeck));\n  };\n\n  const addDeck = (deckName) => {\n    setFlaggedOnly(false);\n    var newId = uuid();\n    var newObj = {\n      name: newId,\n      content: {\n        id: newId,\n        name: deckName,\n        created: new Date(),\n        modified: new Date(),\n        cards: [\n          {\n            id: uuid(),\n            front: \"\",\n            back: \"\",\n            flagged: false\n          }\n        ]\n      }\n    }\n    localStorage.setItem(newObj.name, JSON.stringify(newObj.content));\n    handleDeckSelected(newObj.content);\n  };\n\n  const visibleCards = () => {\n    var visibleDeck = { ...deck }\n    if (flaggedOnly) {\n      visibleDeck.cards = deck.cards.filter(c =>\n        c.flagged);\n    }\n    if (shuffled) {\n      var cards = [...visibleDeck.cards];\n      visibleDeck.cards = shuffle(cards);\n    }\n    return visibleDeck;\n  };\n\n  /********** EFFECTS **********/\n  useEffect(() => {\n    setDeck(JSON.parse(localStorage.getItem(localStorage.getItem(\"lastOpen\"))));\n  }, []);\n\n  /********** EVENT HANDLERS **********/\n  const handleDrawerOpen = () => { setDrawer(true); };\n  const handleDrawerClose = () => { setDrawer(false); };\n  const handleNewDeck = () => {\n    setNewDeckDialog(true);\n  };\n  const handleDuplicateDeck = () => {\n    setDuplicateDeckDialog(true);\n  };\n  const handleNewDeckDialogClose = () => { setNewDeckDialog(false); };\n  const handleDuplicateDeckDialogClose = () => { setDuplicateDeckDialog(false); };\n  const handleNewDeckNameChange = (event) => {\n    var text = event.target.value;\n    text = text.substr(0, 20);\n    setNewDeckName(text);\n  };\n  const handleNewDeckConfirm = (event) => {\n    event.preventDefault();\n    event.stopPropagation();\n    if (newDeckName.trim()) {\n      setEditing(true);\n      setNewDeckDialog(false);\n      addDeck(newDeckName.trim());\n      setNewDeckName('');\n    }\n  };\n  const handleDuplicateDeckConfirm = (event) => {\n    event.preventDefault();\n    event.stopPropagation();\n    if (newDeckName.trim()) {\n      setDuplicateDeckDialog(false);\n      var newDeck = { ...deck };\n      newDeck.id = uuid();\n      newDeck.name = newDeckName.trim();\n      newDeck.created = formattedDate();\n      localStorage.setItem(newDeck.id, JSON.stringify(newDeck));\n      setNewDeckName('');\n      if (openNewDeck) { setDeck(newDeck); }\n    }\n  };\n  const handleDeckSelected = (deck) => {\n    setDrawer(false);\n    setDeck(JSON.parse(localStorage.getItem(deck.id)));\n    localStorage.setItem(\"lastOpen\", deck.id);\n  };\n  const handleCardChange = (content, id, flipped) => {\n    let tmpDeck = { ...deck };\n    if (flipped) {\n      tmpDeck.cards.find(c => c.id === id).back = content;\n    } else {\n      tmpDeck.cards.find(c => c.id === id).front = content;\n    }\n    writeDeck(tmpDeck);\n  };\n  const handleRenameDeck = () => {\n    setRenameDeckName(deck.name);\n    setRenameDeckDialog(true);\n  }\n  const handleRenameDeckDialogClose = () => {\n    setRenameDeckDialog(false);\n  }\n  const handleRenameDeckNameChanged = (event) => {\n    var text = event.target.value;\n    text = text.substr(0, 20);\n    setRenameDeckName(text);\n  }\n  const handleRenameDeckConfirm = (event) => {\n    event.preventDefault();\n    event.stopPropagation();\n    if (renameDeckName.trim()) {\n      setRenameDeckDialog(false);\n      var newDeck = { ...deck };\n      newDeck.name = renameDeckName.trim();\n      writeDeck(newDeck);\n    }\n  }\n  const handleDeleteDeck = () => {\n    setDeleteDeckDialog(true);\n  }\n  const handleDeleteDeckDialogClose = () => {\n    setDeleteDeckDialog(false);\n  };\n  const handleDeleteDeckConfirm = () => {\n    setDeleteDeckDialog(false);\n    localStorage.removeItem(deck.id);\n    setDeck(null);\n  };\n  const handleOpenNewDeckChange = () => {\n    setOpenNewDeck(!openNewDeck);\n  };\n  const handleAddCard = (front, back) => {\n    var tmpDeck = { ...deck };\n    tmpDeck.cards.push({\n      id: uuid(),\n      front: front,\n      back: back,\n      flagged: false\n    });\n    writeDeck(tmpDeck);\n  };\n  const handleDeleteCard = (index) => {\n    if (deck.cards.length === 1) {\n      handleDeleteDeckConfirm();\n    } else {\n      var tmpDeck = { ...deck };\n      tmpDeck.cards.splice(index, 1);\n      writeDeck(tmpDeck);\n    }\n  };\n  const handleFlagToggle = (id) => {\n    if (flaggedOnly && deck.cards.filter(c => c.flagged).length < 2) {\n      handleFlaggedOnlyToggle();\n    }\n    var tmpDeck = { ...deck };\n    tmpDeck.cards.find(c => c.id === id).flagged =\n      !deck.cards.find(c => c.id === id).flagged;\n    writeDeck(tmpDeck);\n  };\n  const handleFlaggedOnlyToggle = () => { setFlaggedOnly(f => !f); };\n  const handleShuffleToggle = () => { setShuffled(s => !s); };\n  const handleToggleEdit = () => { setEditing(!editing); };\n  const handleSwapAll = () => {\n    let tmpDeck = { ...deck };\n    tmpDeck.cards.forEach(card => {\n      let tmpContent = card.front;\n      card.front = card.back;\n      card.back = tmpContent;\n    });\n    setDeck(tmpDeck);\n  }\n\n  /********** UI CONSTANTS **********/\n  const emptyDrawer = (\n    <div className=\"EmptyDrawer\">\n      <Material.Typography variant=\"h6\">No decks found</Material.Typography>\n    </div>\n  );\n\n  const deleteDeckDialogContent = (\n    <Material.Dialog open={deleteDeckDialog} onClose={handleDeleteDeckDialogClose}>\n      <Material.DialogTitle>Delete \"{deck ? deck.name : null}\"?</Material.DialogTitle>\n      <Material.DialogContent>\n        <Material.DialogContentText>\n          This deck will be deleted forever (a really long time).\n        </Material.DialogContentText>\n      </Material.DialogContent>\n      <Material.DialogActions>\n        <Material.Button onClick={handleDeleteDeckDialogClose}>Cancel</Material.Button>\n        <Material.Button color=\"secondary\" onClick={handleDeleteDeckConfirm}>Delete</Material.Button>\n      </Material.DialogActions>\n    </Material.Dialog>\n  );\n\n  const newDeckDialogContent = (\n    <Material.Dialog open={newDeckDialog} onClose={handleNewDeckDialogClose}>\n      <form onSubmit={handleNewDeckConfirm}>\n        <Material.DialogTitle>New Deck</Material.DialogTitle>\n        <Material.DialogContent>\n          <Material.TextField\n            autoFocus\n            label=\"Deck name\"\n            value={newDeckName}\n            onChange={handleNewDeckNameChange} />\n        </Material.DialogContent>\n        <Material.DialogActions>\n          <Material.Button onClick={handleNewDeckDialogClose}>Cancel</Material.Button>\n          <Material.Button\n            disabled={!newDeckName.trim()}\n            type=\"submit\"\n          >\n            Add\n            </Material.Button>\n        </Material.DialogActions>\n      </form>\n    </Material.Dialog>\n  );\n\n  const duplicateDeckDialogContent = (\n    <Material.Dialog open={duplicateDeckDialog} onClose={handleDuplicateDeckDialogClose}>\n      <form onSubmit={handleDuplicateDeckConfirm}>\n        <Material.DialogTitle>Duplicate \"{deck ? deck.name : null}\"</Material.DialogTitle>\n        <Material.DialogContent className=\"DialogGrid\">\n          <Material.TextField\n            autoFocus\n            label=\"Deck name\"\n            value={newDeckName}\n            onChange={handleNewDeckNameChange} />\n          <Material.FormControlLabel\n            control={\n              <Material.Checkbox\n                checked={openNewDeck}\n                onChange={handleOpenNewDeckChange}\n                color=\"primary\"\n              />\n            }\n            label={\"Open \" + (newDeckName ? newDeckName : \"new deck\")}\n          />\n        </Material.DialogContent>\n        <Material.DialogActions>\n          <Material.Button onClick={handleDuplicateDeckDialogClose}>Cancel</Material.Button>\n          <Material.Button\n            disabled={!newDeckName.trim()}\n            type=\"submit\"\n          >\n            Add\n            </Material.Button>\n        </Material.DialogActions>\n      </form>\n    </Material.Dialog>\n  );\n\n  const renameDeckDialogContent = (\n    <Material.Dialog open={renameDeckDialog} onClose={handleRenameDeckDialogClose}>\n      <form onSubmit={handleRenameDeckConfirm}>\n        <Material.DialogTitle>Rename Deck</Material.DialogTitle>\n        <Material.DialogContent>\n          <Material.TextField\n            autoFocus\n            label=\"Deck name\"\n            value={renameDeckName}\n            onChange={handleRenameDeckNameChanged} />\n        </Material.DialogContent>\n        <Material.DialogActions>\n          <Material.Button onClick={handleRenameDeckDialogClose}>Cancel</Material.Button>\n          <Material.Button\n            disabled={!renameDeckName.trim() || renameDeckName === deck.name}\n            type=\"submit\"\n          >\n            Rename\n            </Material.Button>\n        </Material.DialogActions>\n      </form>\n    </Material.Dialog>\n  );\n\n  const drawerContent = (\n    <div className=\"Drawer\">\n      <div className=\"DeckList\">\n        {allStorage() && allStorage().length > 0 ?\n          <Material.List>\n            {allStorage().sort((a, b) =>\n              (a.modified < b.modified) ? 1 : -1).map((d) =>\n                <Material.ListItem\n                  key={d.id}\n                  button\n                  onClick={() => handleDeckSelected(d)}\n                  selected={deck ? deck.id === d.id : false}\n                >\n                  <Material.ListItemText\n                    primary={d.name}\n                    secondary={formattedDate(d.modified)}\n                    primaryTypographyProps={{ noWrap: true }}\n                  />\n                </Material.ListItem>)}\n          </Material.List> :\n          emptyDrawer}\n      </div>\n      <Material.Button\n        className=\"DrawerButton\"\n        disableElevation\n        startIcon={<Icon.Add />}\n        onClick={handleNewDeck}\n        fullWidth\n        variant=\"contained\"\n      >\n        New Deck\n      </Material.Button>\n    </div>\n  );\n\n  const emptyState = (\n    <EmptyState\n      onClick={handleNewDeck}\n      button=\"New Deck\"\n      buttonIcon={<Icon.Add />}\n    >\n      Select a Deck from the drawer to get started.\n    </EmptyState>\n  );\n\n  const viewContent = (\n    deck ?\n      <DeckView\n        deck={visibleCards()}\n        onFlag={handleFlagToggle}\n        onFlaggedOnly={handleFlaggedOnlyToggle}\n        onShuffle={handleShuffleToggle}\n        flaggedOnly={flaggedOnly}\n        shuffled={shuffled}\n        focus={freeView}\n      /> : emptyState);\n\n  const editContent = (\n    deck ?\n      <GridView\n        deck={deck}\n        onChange={handleCardChange}\n        onAddCard={handleAddCard}\n        onDeleteCard={handleDeleteCard}\n        onFlag={handleFlagToggle}\n        onDelete={handleDeleteCard}\n        onSwapAll={handleSwapAll}\n        onViewCards={handleToggleEdit}\n      /> : emptyState);\n\n  const content = editing ? editContent : viewContent;\n\n  const appMenuContent = (\n    <div>\n      <Material.Tooltip title=\"Add deck\">\n        <Material.IconButton\n          onClick={handleNewDeck}\n        >\n          <Icon.AddCircle style={{ color: \"#fff\" }} />\n        </Material.IconButton>\n      </Material.Tooltip>\n      <Material.Tooltip title={editing ? \"View deck\" : \"Edit deck\"}>\n        <Material.IconButton\n          disabled={!deck}\n          onClick={handleToggleEdit}\n        >\n          {editing ?\n            <Icon.Slideshow style={{\n              color: \"#fff\",\n              opacity: deck ? 1 : 0.5\n            }} /> :\n            <Icon.Edit style={{\n              color: \"#fff\",\n              opacity: deck ? 1 : 0.5\n            }} />\n          }\n        </Material.IconButton>\n      </Material.Tooltip>\n      <Material.Tooltip title=\"Rename deck\">\n        <Material.IconButton\n          disabled={!deck}\n          onClick={handleRenameDeck}\n        >\n          <Icon.Spellcheck style={{\n            color: \"#fff\",\n            opacity: deck ? 1 : 0.5\n          }} />\n        </Material.IconButton>\n      </Material.Tooltip>\n      <Material.Tooltip title=\"Duplicate deck\">\n        <Material.IconButton\n          disabled={!deck}\n          onClick={handleDuplicateDeck}\n        >\n          <Icon.FilterNone style={{\n            color: \"#fff\",\n            opacity: deck ? 1 : 0.5\n          }} />\n        </Material.IconButton>\n      </Material.Tooltip>\n      <Material.Tooltip title=\"Delete deck\">\n        <Material.IconButton\n          disabled={!deck}\n          onClick={handleDeleteDeck}\n          edge=\"end\"\n        >\n          <Icon.Delete style={{\n            color: \"#fff\",\n            opacity: deck ? 1 : 0.5\n          }} />\n        </Material.IconButton>\n      </Material.Tooltip>\n    </div>\n  );\n\n  /********** RENDER **********/\n  return (\n    <div className=\"App\">\n      <Material.AppBar position=\"sticky\" elevation={3}>\n        <Material.Toolbar>\n          <div style={{\n            display: \"flex\",\n            width: \"100%\",\n            alignItems: \"center\"\n          }}>\n            <div className=\"EvenFlex\">\n              <span>\n                <div\n                  className=\"LeftAlign\"\n                  style={{\n                    display: \"flex\",\n                    alignItems: \"center\"\n                  }}\n                >\n                  <Material.Tooltip title=\"View decks\">\n                    <Material.IconButton edge=\"start\" color=\"inherit\" onClick={handleDrawerOpen}>\n                      <Icon.Menu />\n                    </Material.IconButton>\n                  </Material.Tooltip>\n                  <img\n                    src=\"https://www.crews.dev/b-cards/icons/favicon-128.png\"\n                    style={{ height: \"48px\" }}\n                    alt=\"b-cards logo\"\n                  />\n                </div>\n              </span>\n            </div>\n            <div className=\"EvenFlex\">\n              <span>\n                <Material.Typography className=\"TitleText CenteredFlex\" variant=\"h6\" noWrap>\n                  {deck ? deck.name : \"No deck loaded\"}\n                </Material.Typography>\n              </span>\n            </div>\n            <div className=\"EvenFlex\">\n              <span className=\"AutoWidth RightAlign\">\n                {appMenuContent}\n              </span>\n            </div>\n          </div>\n        </Material.Toolbar>\n      </Material.AppBar>\n      <div className=\"Page\">\n        {content}\n      </div>\n      <React.Fragment>\n        <Material.Drawer anchor=\"left\" open={drawer} onClose={handleDrawerClose}>\n          {drawerContent}\n        </Material.Drawer>\n        {newDeckDialogContent}\n        {deleteDeckDialogContent}\n        {duplicateDeckDialogContent}\n        {renameDeckDialogContent}\n      </React.Fragment>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();"],"sourceRoot":""}