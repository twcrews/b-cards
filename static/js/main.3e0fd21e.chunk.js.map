{"version":3,"sources":["components/EmptyState.js","components/BCard.js","components/DeckView.js","components/CardEdit.js","components/GridView.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["EmptyState","props","className","style","fontSize","variant","children","onClick","color","startIcon","buttonIcon","button","BCard","Card","elevation","square","Typography","flipped","number","count","ReactHtmlParser","content","Button","onDuplicate","size","disabled","flaggedOnly","flagged","onFlag","disableElevation","onFlip","DeckView","useState","setFlipped","selectedCard","setSelectedCard","cardIn","setCardIn","slideDirection","setSlideDirection","displayCard","activeId","card","deck","cards","id","lastCard","length","isLastCard","isFirstCard","discreetFlip","callback","handleFlip","handleCardChange","onCardChange","handleAdvanceCard","setTimeout","c","handleReverseCard","handleJumpToEnd","handleJumpToStart","addCard","frontContent","backContent","onAddCard","handleAddCard","handleDuplicateCard","front","back","handleFlagToggle","handleKeyPress","event","focus","key","preventDefault","stopPropagation","useEffect","window","addEventListener","removeEventListener","controls","ButtonGroup","shuffled","onShuffle","filter","onFlaggedOnly","endIcon","Slide","in","direction","height","isFlipped","flipDirection","flipSpeedBackToFront","flipSpeedFrontToBack","onEditorChange","CardEdit","focused","setFocused","map","side","toUpperCase","textAlign","inline","editor","_editor","onChange","handleEditorChange","onKeyDown","onKeyUp","onFocus","handleFocus","onBlur","handleBlur","value","init","menubar","toolbar","content_style","tmpVal","onDelete","GridView","handleFlag","marginBottom","index","handleDelete","marginTop","Add","App","setDeck","drawer","setDrawer","newDeckDialog","setNewDeckDialog","duplicateDeckDialog","setDuplicateDeckDialog","renameDeckDialog","setRenameDeckDialog","deleteDeckDialog","setDeleteDeckDialog","newDeckName","setNewDeckName","renameDeckName","setRenameDeckName","openNewDeck","setOpenNewDeck","appMenu","setAppMenu","appMenuAnchor","setAppMenuAnchor","setFlaggedOnly","setShuffled","editing","setEditing","freeView","uuid","replace","Math","random","toString","allStorage","storage","keys","Object","localStorage","i","push","JSON","parse","getItem","formattedDate","date","Date","toLocaleString","month","day","year","hour","minute","writeDeck","newDeck","modified","setItem","stringify","visibleCards","visibleDeck","array","temporaryValue","randomIndex","currentIndex","floor","shuffle","handleNewDeck","handleNewDeckDialogClose","handleDuplicateDeckDialogClose","handleNewDeckNameChange","text","target","substr","handleDeckSelected","tmpDeck","find","handleRenameDeckDialogClose","handleDeleteDeckDialogClose","handleDeleteDeckConfirm","removeItem","handleDeleteCard","splice","handleFlaggedOnlyToggle","f","emptyDrawer","deleteDeckDialogContent","open","onClose","name","newDeckDialogContent","onSubmit","trim","deckName","newId","newObj","created","addDeck","autoFocus","label","type","duplicateDeckDialogContent","control","checked","renameDeckDialogContent","drawerContent","sort","a","b","d","selected","primary","secondary","primaryTypographyProps","noWrap","fullWidth","emptyState","viewContent","onDeleteCard","s","editContent","appMenuContent","anchorEl","position","display","width","justifyContent","alignItems","edge","currentTarget","Fragment","anchor","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.3e0fd21e.chunk.js","sourcesContent":["import React from 'react';\nimport SearchIcon from '@material-ui/icons/Search';\nimport * as M from '@material-ui/core';\n\nexport default function EmptyState(props) {\n    return (\n        <div className=\"EmptyState\">\n            <SearchIcon style={{ fontSize: 200 }}/>\n            <M.Typography\n                variant=\"h6\"\n            >\n                {props.children}\n            </M.Typography>\n            <M.Button \n                variant=\"contained\" \n                onClick={props.onClick}\n                color=\"primary\"\n                startIcon={props.buttonIcon}\n            >\n                {props.button}\n            </M.Button>\n        </div>\n    );\n}","import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport { Button, Typography } from '@material-ui/core';\nimport * as Icon from '@material-ui/icons';\nimport ReactHtmlParser from 'react-html-parser';\n\nexport default function BCard(props) {\n    const handleFlagToggle = () => { props.onFlag(); }\n\n    return (\n        <Card elevation={3} square className=\"Card\">\n            <div className=\"CardHeader BorderBox CenterVertical\">\n                <div className=\"LeftAlign\">\n                    <Typography variant=\"h6\">\n                        {props.flipped ? \"Back\" : \"Front\"}\n                    </Typography>\n                </div>\n                <div className=\"CenterAlign\">\n                    <Typography variant=\"h6\">\n                        {props.number + \" of \" + props.count}\n                    </Typography>\n                </div>\n                <div className=\"RightAlign\"/>\n            </div>\n            <div className=\"CardContent\">\n                <div>{ReactHtmlParser(props.content)}</div>\n            </div>\n            <div className=\"CardTools CenterVertical BorderBox\">\n                <span className=\"AutoWidth LeftAlign\">\n                    <Button\n                        onClick={props.onDuplicate}\n                        size=\"large\"\n                        startIcon={<Icon.FilterNone />}\n                        disabled={props.flaggedOnly}\n                    >\n                        Duplicate\n                    </Button>\n                </span>\n                <span className=\"AutoWidth CenterAlign\">\n                    <Button\n                        className={props.flagged ? \"FlagButtonActive\" : \"\"}\n                        variant={props.flagged ? \"contained\" : \"text\"}\n                        startIcon={<Icon.Flag color=\"inherit\" />}\n                        onClick={handleFlagToggle}\n                        size=\"large\"\n                        disableElevation\n                    >\n                        {props.flagged ? \"Flagged\" : \"Flag\"}\n                    </Button>\n                </span>\n                <div className=\"FlexGap RightAlign\">\n                    <Button\n                        onClick={props.onFlip}\n                        startIcon={<Icon.Refresh />}\n                        size=\"large\"\n                    >\n                        Flip\n                    </Button>\n                </div>\n            </div>\n        </Card>\n    );\n}","import React, { useState, useEffect } from 'react';\nimport {\n    Button,\n    ButtonGroup,\n    Slide\n} from '@material-ui/core';\nimport * as Icon from '@material-ui/icons';\nimport BCard from './BCard.js';\nimport ReactCardFlip from 'react-card-flip';\n\nexport default function DeckView(props) {\n    const [flipped, setFlipped] = useState(false);\n    const [selectedCard, setSelectedCard] = useState(0);\n    const [cardIn, setCardIn] = useState(true);\n    const [slideDirection, setSlideDirection] = useState(null);\n\n    const displayCard = () => selectedCard + 1;\n    const activeId = () => {\n        let card = props.deck.cards[selectedCard];\n        return card ? card.id : 0;\n    }\n\n    const lastCard = () => props.deck.cards.length - 1;\n\n    const isLastCard = selectedCard === props.deck.cards.length - 1;\n    const isFirstCard = selectedCard === 0;\n\n    const discreetFlip = (callback) => {\n        if (flipped) {\n            setFlipped(false);\n            callback();\n        } else {\n            callback();\n        }\n    }\n    const handleFlip = () => { setFlipped(!flipped); };\n    const handleCardChange = (content) => {\n        props.onCardChange(content, activeId(), flipped);\n    };\n\n    const handleAdvanceCard = () => {\n        setSlideDirection(\"right\");\n        setCardIn(false);\n        discreetFlip(() => setTimeout(() => {\n            setSlideDirection(\"left\");\n            setCardIn(true);\n            setSelectedCard(c => c < lastCard() ? \n                c + 1 : lastCard());\n        }, 230));\n    };\n    const handleReverseCard = () => {\n        setSlideDirection(\"left\");\n        setCardIn(false);\n        discreetFlip(() => setTimeout(() => {\n            setSlideDirection(\"right\");\n            setCardIn(true);\n            setSelectedCard(c => c > 0 ? c - 1 : 0);\n        }, 230));\n    };\n    const handleJumpToEnd = () => {\n        setSlideDirection(\"right\");\n        setCardIn(false);\n        discreetFlip(() => setTimeout(() => {\n            setSlideDirection(\"left\");\n            setCardIn(true);\n            setSelectedCard(props.deck.cards.length - 1);\n        }, 230));\n    };\n    const handleJumpToStart = () => {\n        setSlideDirection(\"left\");\n        setCardIn(false);\n        discreetFlip(() => setTimeout(() => {\n            setSlideDirection(\"right\");\n            setCardIn(true);\n            setSelectedCard(0);\n        }, 230));\n    };\n    const addCard = (frontContent, backContent) => {\n        setFlipped(false);\n        props.onAddCard(frontContent, backContent);\n        setSelectedCard(props.deck.cards.length - 1)\n    }\n    const handleAddCard = () => { addCard(\"\", \"\"); };\n    const handleDuplicateCard = () => {\n        addCard(props.deck.cards[selectedCard].front,\n            props.deck.cards[selectedCard].back);\n    };\n    const handleFlagToggle = () => {\n        if (props.flaggedOnly &&\n            props.deck.cards.length - 1 === selectedCard) {\n            setSelectedCard(c => c === 0 ? 0 : c - 1);\n        }\n        props.onFlag(activeId());\n    };\n    const handleFlaggedOnlyToggle = () => {\n        discreetFlip(() => setSelectedCard(0));\n        props.onFlaggedOnly();\n    };\n    const handleShuffleToggle = () => {\n        discreetFlip(() => setSelectedCard(0));\n        props.onShuffle();\n    }\n    const handleKeyPress = (event) => {\n        if (props.focus) {\n            switch (event.key) {\n                case \"ArrowLeft\":\n                    if (!isFirstCard) {\n                        handleReverseCard();\n                    }\n                    break;\n                case \"ArrowRight\":\n                    if (!isLastCard) {\n                        handleAdvanceCard();\n                    }\n                    break;\n                case \"ArrowUp\":\n                    if (!isFirstCard) {\n                        handleJumpToStart();\n                    }\n                    break;\n                case \"ArrowDown\":\n                    if (!isLastCard) {\n                        handleJumpToEnd();\n                    }\n                    break;\n                case \" \":\n                    event.preventDefault();\n                    event.stopPropagation();\n                    handleFlip();\n                    break;\n                default: break;\n            }\n        }\n    };\n\n    useEffect(() => {\n        window.addEventListener(\"keydown\", handleKeyPress);\n        return () => window.removeEventListener(\"keydown\", handleKeyPress);\n    });\n\n    const controls = (\n        <div className=\"DeckControls\">\n            <ButtonGroup>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    startIcon={<Icon.FirstPage />}\n                    disabled={isFirstCard}\n                    onClick={handleJumpToStart}\n                >\n                    First\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    startIcon={<Icon.ArrowBack />}\n                    disabled={isFirstCard}\n                    onClick={handleReverseCard}\n                >\n                    Back\n                </Button>\n            </ButtonGroup>\n            <ButtonGroup>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    startIcon={props.shuffled ?\n                        <Icon.CheckBox /> :\n                        <Icon.CheckBoxOutlineBlank />}\n                    disabled={props.deck.cards.length === 1}\n                    onClick={handleShuffleToggle}\n                >\n                    Shuffle\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    startIcon={props.flaggedOnly ?\n                        <Icon.CheckBox /> :\n                        <Icon.CheckBoxOutlineBlank />}\n                    disabled={props.deck.cards.filter(c => c.flagged).length < 1}\n                    onClick={handleFlaggedOnlyToggle}\n                >\n                    Flagged Only\n                </Button>\n            </ButtonGroup>\n            <ButtonGroup>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    endIcon={<Icon.ArrowForward />}\n                    disabled={isLastCard}\n                    onClick={handleAdvanceCard}\n                >\n                    Next\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    endIcon={<Icon.LastPage />}\n                    disabled={isLastCard}\n                    onClick={handleJumpToEnd}\n                >\n                    Last\n                </Button>\n            </ButtonGroup>\n            <Button\n                color=\"primary\"\n                variant=\"contained\"\n                startIcon={<Icon.Add />}\n                onClick={handleAddCard}\n                disabled={props.flaggedOnly}\n            >\n                Add Card\n            </Button>\n        </div>\n    );\n\n    useEffect(() => {\n        setSelectedCard(0);\n        setFlipped(false);\n    }, [props.deck.id]);\n\n    return (\n        <div className=\"DeckView\">\n            <div className=\"CardSpace\">\n                <Slide \n                    in={cardIn}\n                    direction={slideDirection}>\n                    <div\n                        style={{height: \"100%\"}}>\n                    <ReactCardFlip\n                        isFlipped={flipped}\n                        flipDirection=\"vertical\"\n                        flipSpeedBackToFront={0.3}\n                        flipSpeedFrontToBack={0.3}\n                    >\n                        <BCard\n                            id={activeId() + \"-front\"}\n                            flipped={false}\n                            onEditorChange={handleCardChange}\n                            onFlip={handleFlip}\n                            onDuplicate={handleDuplicateCard}\n                            number={displayCard()}\n                            count={props.deck.cards.length}\n                            content={props.deck.cards[selectedCard]?.front}\n                            flagged={props.deck.cards[selectedCard]?.flagged}\n                            onFlag={handleFlagToggle}\n                            flaggedOnly={props.flaggedOnly}\n                        />\n                        <BCard\n                            id={activeId() + \"-back\"}\n                            flipped={true}\n                            onEditorChange={handleCardChange}\n                            onFlip={handleFlip}\n                            onAddCard={handleAddCard}\n                            onDuplicate={handleDuplicateCard}\n                            number={displayCard()}\n                            count={props.deck.cards.length}\n                            content={props.deck.cards[selectedCard]?.back}\n                            flagged={props.deck.cards[selectedCard]?.flagged}\n                            onFlag={handleFlagToggle}\n                            flaggedOnly={props.flaggedOnly}\n                        />\n                    </ReactCardFlip>\n                    </div>\n                </Slide>\n            </div>\n            {controls}\n        </div>\n    );\n}","import React, { useState } from 'react';\nimport { Editor } from '@tinymce/tinymce-react';\nimport * as Material from '@material-ui/core';\nimport * as Icon from '@material-ui/icons';\n\nexport function CardEdit(props) {\n    const [focused, setFocused] = useState(null);\n\n    const handleEditorChange = (content, _editor, side) => {\n            props.onChange(content, side);\n    };\n    const handleFlag = () => { props.onFlag(props.card.id); };\n    const handleClear = () => {\n        props.onChange(\"\", \"front\");\n        props.onChange(\"\", \"back\");\n    }\n    const handleDelete = () => { props.onDelete(props.card.id); };\n    const handleFocus = (side) => { setFocused(side); };\n    const handleBlur = (side) => { \n        if (focused === side) {\n            setFocused(null); \n        }\n    };\n    const handleSwap = () => {\n        let tmpVal = props.card[\"front\"];\n        props.onChange(props.card[\"back\"], \"front\");\n        props.onChange(tmpVal, \"back\");\n    }\n\n    return (\n        <div className=\"EditCardContainer\">\n            <div id={props.card.id} className=\"EditCardFlex\">\n                {[\"front\", \"back\"].map(side =>\n                    <Material.Card\n                        key={side}\n                        square\n                        elevation={3}\n                        className=\"EditCard\"\n                    >\n                        <Material.Typography\n                            style={{ color: \"#888\" }}\n                            variant=\"caption\"\n                        >\n                            {side.toUpperCase()}\n                        </Material.Typography>\n                        <div className=\"EditCardContent\">\n                            <Editor\n                                style={{ textAlign: \"center\" }}\n                                id={props.card.id + \"-\" + side}\n                                inline\n                                onEditorChange={(content, editor) => handleEditorChange(content, editor, side)}\n                                onKeyDown={(event) => event.stopPropagation()}\n                                onKeyUp={(event) => event.preventDefault()}\n                                onFocus={() => handleFocus(side)}\n                                onBlur={() => handleBlur(side)}\n                                value={props.card[side]}\n                                init={{\n                                    menubar: false,\n                                    toolbar: 'undo redo | fontsizeselect | bold italic backcolor | ' +\n                                        'alignleft aligncenter alignright alignjustify | ' +\n                                        'bullist numlist outdent indent | removeformat',\n                                    content_style: 'body { font-family: Roboto; font-size: 18pt; text-align: center}'\n                                }}\n                            />\n                            {focused !== side && (!props.card[side] || props.card[side] === \"\") ?\n                                <Material.Typography \n                                    variant=\"h5\" \n                                    className=\"CenterAbsolute GrayText\"\n                                >\n                                    No content\n                                </Material.Typography> : \n                            null }\n                        </div>\n                    </Material.Card>\n                )}\n            </div>\n            <div className=\"EditControls\">\n                <Material.IconButton\n                    onClick={handleFlag}\n                    className={props.card.flagged ? \"FlagButtonActive\" : null}\n                >\n                    <Icon.Flag />\n                </Material.IconButton>\n                <Material.IconButton\n                    onClick={handleSwap}\n                >\n                    <Icon.SwapHoriz />\n                </Material.IconButton>\n                <Material.IconButton\n                    onClick={handleClear}\n                >\n                    <Icon.Backspace />\n                </Material.IconButton>\n                <Material.IconButton\n                    onClick={handleDelete}\n                >\n                    <Icon.Delete />\n                </Material.IconButton>\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport { CardEdit } from './CardEdit';\nimport { Button } from '@material-ui/core';\nimport { Add } from '@material-ui/icons';\n\nexport function GridView(props) {\n    const handleCardChange = (content, id, side) => {\n        props.onChange(content, id, side === \"back\");\n    };\n    const handleAddCard = () => { props.onAddCard(); };\n    const handleFlag = (id) => { props.onFlag(id); };\n    const handleDelete = (index) => { props.onDelete(index); };\n\n    return (\n        <div style={{marginBottom: \"80px\"}}>\n            {props.deck.cards.map((card, index) =>\n                <CardEdit\n                    key={card.id}\n                    card={card}\n                    onChange={(content, side) =>\n                        handleCardChange(content, card.id, side)}\n                    onFlag={handleFlag}\n                    onDelete={() => handleDelete(index)}\n                />\n            )}\n            <Button\n                style={{marginTop: \"40px\"}}\n                size=\"large\"\n                startIcon={<Add/>}\n                onClick={handleAddCard}\n                variant=\"contained\"\n                color=\"primary\"\n            >\n                Add Card\n            </Button>\n        </div>);\n}","import React, { useState, useEffect } from 'react';\nimport * as Material from '@material-ui/core';\nimport * as Icon from '@material-ui/icons';\nimport './App.css';\nimport EmptyState from './components/EmptyState';\nimport DeckView from './components/DeckView';\nimport { GridView } from './components/GridView';\n\nfunction App() {\n  /********** STATES **********/\n  const [deck, setDeck] = useState(null);\n  const [drawer, setDrawer] = useState(false);\n  const [newDeckDialog, setNewDeckDialog] = useState(false);\n  const [duplicateDeckDialog, setDuplicateDeckDialog] = useState(false);\n  const [renameDeckDialog, setRenameDeckDialog] = useState(false);\n  const [deleteDeckDialog, setDeleteDeckDialog] = useState(false);\n  const [newDeckName, setNewDeckName] = useState('');\n  const [renameDeckName, setRenameDeckName] = useState('');\n  const [openNewDeck, setOpenNewDeck] = useState(false);\n  const [appMenu, setAppMenu] = useState(false);\n  const [appMenuAnchor, setAppMenuAnchor] = useState(null);\n  const [flaggedOnly, setFlaggedOnly] = useState(false);\n  const [shuffled, setShuffled] = useState(false);\n  const [editing, setEditing] = useState(false);\n\n\n  /********** CONSTANTS **********/\n  const freeView =\n    deck &&\n    !drawer &&\n    !newDeckDialog &&\n    !duplicateDeckDialog &&\n    !renameDeckDialog &&\n    !deleteDeckDialog;\n\n\n  /********** FUNCTIONS **********/\n  const uuid = () => {\n    return 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'.replace(/x/g, function (c) {\n      return (Math.random() * 16 | 0).toString(16);\n    });\n  };\n\n  const shuffle = (array) => {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  };\n\n  const allStorage = () => {\n    var storage = [],\n      keys = Object.keys(localStorage),\n      i = keys.length;\n\n    while (i--) {\n      if (keys[i] !== \"lastOpen\") {\n        storage.push(JSON.parse(localStorage.getItem(keys[i])));\n      }\n    }\n    return storage;\n  };\n\n  const formattedDate = (date) => {\n    return (new Date(date)).toLocaleString(\n      [], {\n      month: 'numeric',\n      day: 'numeric',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const writeDeck = (newDeck) => {\n    newDeck.modified = new Date();\n    setDeck(newDeck);\n    localStorage.setItem(newDeck.id, JSON.stringify(newDeck));\n  };\n\n  const addDeck = (deckName) => {\n    setFlaggedOnly(false);\n    var newId = uuid();\n    var newObj = {\n      name: newId,\n      content: {\n        id: newId,\n        name: deckName,\n        created: new Date(),\n        modified: new Date(),\n        cards: [\n          {\n            id: uuid(),\n            front: \"\",\n            back: \"\",\n            flagged: false\n          }\n        ]\n      }\n    }\n    localStorage.setItem(newObj.name, JSON.stringify(newObj.content));\n    handleDeckSelected(newObj.content);\n  };\n\n  const visibleCards = () => {\n    var visibleDeck = { ...deck }\n    if (flaggedOnly) {\n      visibleDeck.cards = deck.cards.filter(c =>\n        c.flagged);\n    }\n    if (shuffled) {\n      var cards = [...visibleDeck.cards];\n      visibleDeck.cards = shuffle(cards);\n    }\n    return visibleDeck;\n  };\n\n  /********** EFFECTS **********/\n  useEffect(() => {\n    setDeck(JSON.parse(localStorage.getItem(localStorage.getItem(\"lastOpen\"))));\n  }, []);\n\n  /********** EVENT HANDLERS **********/\n  const handleDrawerOpen = () => { setDrawer(true); };\n  const handleDrawerClose = () => { setDrawer(false); };\n  const handleNewDeck = () => {\n    setNewDeckDialog(true);\n    setAppMenu(false);\n  };\n  const handleDuplicateDeck = () => {\n    setDuplicateDeckDialog(true);\n    setAppMenu(false);\n  };\n  const handleNewDeckDialogClose = () => { setNewDeckDialog(false); };\n  const handleDuplicateDeckDialogClose = () => { setDuplicateDeckDialog(false); };\n  const handleNewDeckNameChange = (event) => {\n    var text = event.target.value;\n    text = text.substr(0, 20);\n    setNewDeckName(text);\n  };\n  const handleNewDeckConfirm = (event) => {\n    event.preventDefault();\n    event.stopPropagation();\n    if (newDeckName.trim()) {\n      setEditing(true);\n      setNewDeckDialog(false);\n      addDeck(newDeckName.trim());\n      setNewDeckName('');\n    }\n  };\n  const handleDuplicateDeckConfirm = (event) => {\n    event.preventDefault();\n    event.stopPropagation();\n    if (newDeckName.trim()) {\n      setDuplicateDeckDialog(false);\n      var newDeck = { ...deck };\n      newDeck.id = uuid();\n      newDeck.name = newDeckName.trim();\n      newDeck.created = formattedDate();\n      localStorage.setItem(newDeck.id, JSON.stringify(newDeck));\n      setNewDeckName('');\n      if (openNewDeck) { setDeck(newDeck); }\n    }\n  };\n  const handleDeckSelected = (deck) => {\n    setDrawer(false);\n    setDeck(JSON.parse(localStorage.getItem(deck.id)));\n    localStorage.setItem(\"lastOpen\", deck.id);\n  };\n  const handleCardChange = (content, id, flipped) => {\n    let tmpDeck = { ...deck };\n    if (flipped) {\n      tmpDeck.cards.find(c => c.id === id).back = content;\n    } else {\n      tmpDeck.cards.find(c => c.id === id).front = content;\n    }\n    writeDeck(tmpDeck);\n  };\n  const handleRenameDeck = () => {\n    setAppMenu(false);\n    setRenameDeckName(deck.name);\n    setRenameDeckDialog(true);\n  }\n  const handleRenameDeckDialogClose = () => {\n    setRenameDeckDialog(false);\n  }\n  const handleRenameDeckNameChanged = (event) => {\n    var text = event.target.value;\n    text = text.substr(0, 20);\n    setRenameDeckName(text);\n  }\n  const handleRenameDeckConfirm = (event) => {\n    event.preventDefault();\n    event.stopPropagation();\n    if (renameDeckName.trim()) {\n      setRenameDeckDialog(false);\n      var newDeck = { ...deck };\n      newDeck.name = renameDeckName.trim();\n      writeDeck(newDeck);\n    }\n  }\n  const handleDeleteDeck = () => {\n    setAppMenu(false);\n    setDeleteDeckDialog(true);\n  }\n  const handleDeleteDeckDialogClose = () => {\n    setDeleteDeckDialog(false);\n  };\n  const handleDeleteDeckConfirm = () => {\n    setDeleteDeckDialog(false);\n    localStorage.removeItem(deck.id);\n    setDeck(null);\n  };\n  const handleAppMenuOpen = (event) => {\n    setAppMenuAnchor(event.currentTarget);\n    setAppMenu(true);\n  };\n  const handleAppMenuClose = () => { setAppMenu(false); };\n  const handleOpenNewDeckChange = () => {\n    setOpenNewDeck(!openNewDeck);\n  };\n  const handleAddCard = (front, back) => {\n    var tmpDeck = { ...deck };\n    tmpDeck.cards.push({\n      id: uuid(),\n      front: front,\n      back: back,\n      flagged: false\n    });\n    writeDeck(tmpDeck);\n  };\n  const handleDeleteCard = (index) => {\n    if (deck.cards.length === 1) {\n      handleDeleteDeckConfirm();\n    } else {\n      var tmpDeck = { ...deck };\n      tmpDeck.cards.splice(index, 1);\n      writeDeck(tmpDeck);\n    }\n  };\n  const handleFlagToggle = (id) => {\n    if (flaggedOnly && deck.cards.filter(c => c.flagged).length < 2) {\n      handleFlaggedOnlyToggle();\n    }\n    var tmpDeck = { ...deck };\n    tmpDeck.cards.find(c => c.id === id).flagged =\n      !deck.cards.find(c => c.id === id).flagged;\n    writeDeck(tmpDeck);\n  };\n  const handleFlaggedOnlyToggle = () => { setFlaggedOnly(f => !f); };\n  const handleShuffleToggle = () => { setShuffled(s => !s); };\n  const handleToggleEdit = () => { \n    setAppMenu(false);\n    setEditing(!editing); \n  };\n\n  /********** UI CONSTANTS **********/\n  const emptyDrawer = (\n    <div className=\"EmptyDrawer\">\n      <Material.Typography variant=\"h6\">No decks found</Material.Typography>\n    </div>\n  );\n\n  const deleteDeckDialogContent = (\n    <Material.Dialog open={deleteDeckDialog} onClose={handleDeleteDeckDialogClose}>\n      <Material.DialogTitle>Delete \"{deck ? deck.name : null}\"?</Material.DialogTitle>\n      <Material.DialogContent>\n        <Material.DialogContentText>\n          This deck will be deleted forever (a really long time).\n        </Material.DialogContentText>\n      </Material.DialogContent>\n      <Material.DialogActions>\n        <Material.Button onClick={handleDeleteDeckDialogClose}>Cancel</Material.Button>\n        <Material.Button color=\"secondary\" onClick={handleDeleteDeckConfirm}>Delete</Material.Button>\n      </Material.DialogActions>\n    </Material.Dialog>\n  );\n\n  const newDeckDialogContent = (\n    <Material.Dialog open={newDeckDialog} onClose={handleNewDeckDialogClose}>\n      <form onSubmit={handleNewDeckConfirm}>\n        <Material.DialogTitle>New Deck</Material.DialogTitle>\n        <Material.DialogContent>\n          <Material.TextField\n            autoFocus\n            label=\"Deck name\"\n            value={newDeckName}\n            onChange={handleNewDeckNameChange} />\n        </Material.DialogContent>\n        <Material.DialogActions>\n          <Material.Button onClick={handleNewDeckDialogClose}>Cancel</Material.Button>\n          <Material.Button\n            disabled={!newDeckName.trim()}\n            type=\"submit\"\n          >\n            Add\n            </Material.Button>\n        </Material.DialogActions>\n      </form>\n    </Material.Dialog>\n  );\n\n  const duplicateDeckDialogContent = (\n    <Material.Dialog open={duplicateDeckDialog} onClose={handleDuplicateDeckDialogClose}>\n      <form onSubmit={handleDuplicateDeckConfirm}>\n        <Material.DialogTitle>Duplicate \"{deck ? deck.name : null}\"</Material.DialogTitle>\n        <Material.DialogContent className=\"DialogGrid\">\n          <Material.TextField\n            autoFocus\n            label=\"Deck name\"\n            value={newDeckName}\n            onChange={handleNewDeckNameChange} />\n          <Material.FormControlLabel\n            control={\n              <Material.Checkbox\n                checked={openNewDeck}\n                onChange={handleOpenNewDeckChange}\n                color=\"primary\"\n              />\n            }\n            label={\"Open \" + (newDeckName ? newDeckName : \"new deck\")}\n          />\n        </Material.DialogContent>\n        <Material.DialogActions>\n          <Material.Button onClick={handleDuplicateDeckDialogClose}>Cancel</Material.Button>\n          <Material.Button\n            disabled={!newDeckName.trim()}\n            type=\"submit\"\n          >\n            Add\n            </Material.Button>\n        </Material.DialogActions>\n      </form>\n    </Material.Dialog>\n  );\n\n  const renameDeckDialogContent = (\n    <Material.Dialog open={renameDeckDialog} onClose={handleRenameDeckDialogClose}>\n      <form onSubmit={handleRenameDeckConfirm}>\n        <Material.DialogTitle>Rename Deck</Material.DialogTitle>\n        <Material.DialogContent>\n          <Material.TextField\n            autoFocus\n            label=\"Deck name\"\n            value={renameDeckName}\n            onChange={handleRenameDeckNameChanged} />\n        </Material.DialogContent>\n        <Material.DialogActions>\n          <Material.Button onClick={handleRenameDeckDialogClose}>Cancel</Material.Button>\n          <Material.Button\n            disabled={!renameDeckName.trim() || renameDeckName === deck.name}\n            type=\"submit\"\n          >\n            Rename\n            </Material.Button>\n        </Material.DialogActions>\n      </form>\n    </Material.Dialog>\n  );\n\n  const drawerContent = (\n    <div className=\"Drawer\">\n      <div className=\"DeckList\">\n        {allStorage() && allStorage().length > 0 ?\n          <Material.List>\n            {allStorage().sort((a, b) =>\n              (a.modified < b.modified) ? 1 : -1).map((d) =>\n                <Material.ListItem\n                  key={d.id}\n                  button\n                  onClick={() => handleDeckSelected(d)}\n                  selected={deck ? deck.id === d.id : false}\n                >\n                  <Material.ListItemText\n                    primary={d.name}\n                    secondary={formattedDate(d.modified)}\n                    primaryTypographyProps={{ noWrap: true }}\n                  />\n                </Material.ListItem>)}\n          </Material.List> :\n          emptyDrawer}\n      </div>\n      <Material.Button\n        className=\"DrawerButton\"\n        disableElevation\n        startIcon={<Icon.Add />}\n        onClick={handleNewDeck}\n        fullWidth\n        variant=\"contained\"\n      >\n        New Deck\n      </Material.Button>\n    </div>\n  );\n\n  const emptyState = (\n    <EmptyState\n      onClick={handleNewDeck}\n      button=\"New Deck\"\n      buttonIcon={<Icon.Add />}\n    >\n      Select a Deck from the drawer to get started.\n    </EmptyState>\n  );\n\n  const viewContent = (\n    deck ?\n      <DeckView\n        deck={visibleCards()}\n        onCardChange={handleCardChange}\n        onAddCard={handleAddCard}\n        onDeleteCard={handleDeleteCard}\n        onFlag={handleFlagToggle}\n        onFlaggedOnly={handleFlaggedOnlyToggle}\n        onShuffle={handleShuffleToggle}\n        flaggedOnly={flaggedOnly}\n        shuffled={shuffled}\n        focus={freeView}\n      /> : emptyState);\n\n  const editContent = (\n    deck ?\n      <GridView\n        deck={visibleCards()}\n        onChange={handleCardChange}\n        onAddCard={handleAddCard}\n        onDeleteCard={handleDeleteCard}\n        onFlag={handleFlagToggle}\n        onDelete={handleDeleteCard}\n      /> : emptyState);\n\n  const content = editing ? editContent : viewContent;\n\n  const appMenuContent = (\n    <Material.Menu\n      open={appMenu}\n      onClose={handleAppMenuClose}\n      anchorEl={appMenuAnchor}\n    >\n      <Material.MenuItem\n        onClick={handleNewDeck}\n      >\n        <Icon.Add className=\"GrayText\" />\n      Add Deck\n      </Material.MenuItem>\n      <Material.MenuItem\n        disabled={!deck}\n        onClick={handleDuplicateDeck}\n      >\n        <Icon.FilterNone className=\"GrayText\" />\n        Duplicate Deck\n      </Material.MenuItem>\n      <Material.MenuItem\n        disabled={!deck}\n        onClick={handleRenameDeck}\n      >\n        <Icon.Spellcheck className=\"GrayText\" />\n        Rename Deck\n      </Material.MenuItem>\n      <Material.MenuItem\n        disabled={!deck}\n        onClick={handleToggleEdit}\n      >\n      {editing ?\n        <Icon.Slideshow className=\"GrayText\" /> :\n        <Icon.Edit className=\"GrayText\" />\n      }\n      {editing ? \"View Deck\" : \"Edit Deck\"}\n      </Material.MenuItem>\n      <Material.MenuItem\n        disabled={!deck}\n        onClick={handleDeleteDeck}\n      >\n        <Icon.Delete className=\"GrayText\" />\n        Delete Deck\n      </Material.MenuItem>\n    </Material.Menu>\n  );\n\n  /********** RENDER **********/\n  return (\n    <div className=\"App\">\n      <Material.AppBar position=\"sticky\" elevation={3}>\n        <Material.Toolbar>\n          <div style={{\n            display: \"flex\", \n            width: \"100%\", \n            justifyContent: \"space-between\",\n            alignItems: \"center\"\n          }}>\n            <div \n              className=\"LeftAlign\"\n              style={{\n                display: \"flex\",\n                alignItems: \"center\"\n              }}\n            >\n              <Material.IconButton edge=\"start\" color=\"inherit\" onClick={handleDrawerOpen}>\n                <Icon.Menu />\n              </Material.IconButton>\n              <span className=\"TitleText\">\n                bCards\n              </span>\n            </div>\n            <Material.Typography className=\"TitleText CenterAlign\" variant=\"h6\" noWrap>\n              {deck ? deck.name : \"No deck loaded\"}\n            </Material.Typography>\n            <span className=\"AutoWidth RightAlign\">\n              <Material.IconButton\n                color=\"inherit\"\n                onClick={handleAppMenuOpen}\n              >\n                <Icon.MoreVert />\n              </Material.IconButton>\n            </span>\n          </div>\n        </Material.Toolbar>\n      </Material.AppBar>\n      <div className=\"Page\">\n        {content}\n      </div>\n      <React.Fragment>\n        {appMenuContent}\n        <Material.Drawer anchor=\"left\" open={drawer} onClose={handleDrawerClose}>\n          {drawerContent}\n        </Material.Drawer>\n        {newDeckDialogContent}\n        {deleteDeckDialogContent}\n        {duplicateDeckDialogContent}\n        {renameDeckDialogContent}\n      </React.Fragment>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();"],"sourceRoot":""}