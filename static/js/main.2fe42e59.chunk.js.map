{"version":3,"sources":["components/EmptyState.js","components/BCard.js","components/DeckView.js","components/CardEdit.js","components/GridView.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["EmptyState","props","className","style","fontSize","variant","children","onClick","color","startIcon","buttonIcon","button","BCard","Card","elevation","square","Typography","flipped","number","count","ReactHtmlParser","content","Button","onDuplicate","size","disabled","flaggedOnly","flagged","onFlag","disableElevation","onFlip","DeckView","useState","setFlipped","selectedCard","setSelectedCard","cardIn","setCardIn","slideDirection","setSlideDirection","displayCard","activeId","card","deck","cards","id","lastCard","length","isLastCard","isFirstCard","discreetFlip","callback","handleFlip","handleCardChange","onCardChange","handleAdvanceCard","setTimeout","c","handleReverseCard","handleJumpToEnd","handleJumpToStart","addCard","frontContent","backContent","onAddCard","handleAddCard","handleDuplicateCard","front","back","handleFlagToggle","handleKeyPress","event","focus","key","preventDefault","stopPropagation","useEffect","window","addEventListener","removeEventListener","controls","ButtonGroup","shuffled","onShuffle","filter","onFlaggedOnly","endIcon","Slide","in","direction","height","isFlipped","flipDirection","flipSpeedBackToFront","flipSpeedFrontToBack","onEditorChange","CardEdit","focused","setFocused","document","getElementById","e","onBlur","target","position","opacity","onFocus","map","side","toUpperCase","handleFocusSide","textAlign","inline","editor","_editor","onChange","handleEditorChange","onKeyDown","onKeyUp","value","init","menubar","toolbar","content_style","onDelete","GridView","handleFlag","marginBottom","index","handleDelete","marginTop","Add","App","setDeck","drawer","setDrawer","newDeckDialog","setNewDeckDialog","duplicateDeckDialog","setDuplicateDeckDialog","renameDeckDialog","setRenameDeckDialog","deleteDeckDialog","setDeleteDeckDialog","newDeckName","setNewDeckName","renameDeckName","setRenameDeckName","openNewDeck","setOpenNewDeck","appMenu","setAppMenu","appMenuAnchor","setAppMenuAnchor","setFlaggedOnly","setShuffled","editing","setEditing","freeView","uuid","replace","Math","random","toString","allStorage","storage","keys","Object","localStorage","i","push","JSON","parse","getItem","formattedDate","date","Date","toLocaleString","month","day","year","hour","minute","writeDeck","newDeck","modified","setItem","stringify","visibleCards","visibleDeck","array","temporaryValue","randomIndex","currentIndex","floor","shuffle","handleNewDeck","handleNewDeckDialogClose","handleDuplicateDeckDialogClose","handleNewDeckNameChange","text","substr","handleDeckSelected","tmpDeck","find","handleRenameDeckDialogClose","handleDeleteDeckDialogClose","handleDeleteDeckConfirm","removeItem","handleDeleteCard","splice","handleFlaggedOnlyToggle","f","emptyDrawer","deleteDeckDialogContent","open","onClose","name","newDeckDialogContent","onSubmit","trim","deckName","newId","newObj","created","addDeck","autoFocus","label","type","duplicateDeckDialogContent","control","checked","renameDeckDialogContent","drawerContent","sort","a","b","d","selected","primary","secondary","primaryTypographyProps","noWrap","fullWidth","emptyState","viewContent","onDeleteCard","s","editContent","appMenuContent","anchorEl","display","width","justifyContent","alignItems","edge","currentTarget","Fragment","anchor","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.2fe42e59.chunk.js","sourcesContent":["import React from 'react';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport * as M from '@material-ui/core';\r\n\r\nexport default function EmptyState(props) {\r\n    return (\r\n        <div className=\"EmptyState\">\r\n            <SearchIcon style={{ fontSize: 200 }}/>\r\n            <M.Typography\r\n                variant=\"h6\"\r\n            >\r\n                {props.children}\r\n            </M.Typography>\r\n            <M.Button \r\n                variant=\"contained\" \r\n                onClick={props.onClick}\r\n                color=\"primary\"\r\n                startIcon={props.buttonIcon}\r\n            >\r\n                {props.button}\r\n            </M.Button>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport { Button, Typography } from '@material-ui/core';\r\nimport * as Icon from '@material-ui/icons';\r\nimport ReactHtmlParser from 'react-html-parser';\r\n\r\nexport default function BCard(props) {\r\n    const handleFlagToggle = () => { props.onFlag(); }\r\n\r\n    return (\r\n        <Card elevation={3} square className=\"Card\">\r\n            <div className=\"CardHeader BorderBox CenterVertical\">\r\n                <div className=\"LeftAlign\">\r\n                    <Typography variant=\"h6\">\r\n                        {props.flipped ? \"Back\" : \"Front\"}\r\n                    </Typography>\r\n                </div>\r\n                <div className=\"CenterAlign\">\r\n                    <Typography variant=\"h6\">\r\n                        {props.number + \" of \" + props.count}\r\n                    </Typography>\r\n                </div>\r\n                <div className=\"RightAlign\"/>\r\n            </div>\r\n            <div className=\"CardContent\">\r\n                <div>{ReactHtmlParser(props.content)}</div>\r\n            </div>\r\n            <div className=\"CardTools CenterVertical BorderBox\">\r\n                <span className=\"AutoWidth LeftAlign\">\r\n                    <Button\r\n                        onClick={props.onDuplicate}\r\n                        size=\"large\"\r\n                        startIcon={<Icon.FilterNone />}\r\n                        disabled={props.flaggedOnly}\r\n                    >\r\n                        Duplicate\r\n                    </Button>\r\n                </span>\r\n                <span className=\"AutoWidth CenterAlign\">\r\n                    <Button\r\n                        className={props.flagged ? \"FlagButtonActive\" : \"\"}\r\n                        variant={props.flagged ? \"contained\" : \"text\"}\r\n                        startIcon={<Icon.Flag color=\"inherit\" />}\r\n                        onClick={handleFlagToggle}\r\n                        size=\"large\"\r\n                        disableElevation\r\n                    >\r\n                        {props.flagged ? \"Flagged\" : \"Flag\"}\r\n                    </Button>\r\n                </span>\r\n                <div className=\"FlexGap RightAlign\">\r\n                    <Button\r\n                        onClick={props.onFlip}\r\n                        startIcon={<Icon.Refresh />}\r\n                        size=\"large\"\r\n                    >\r\n                        Flip\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </Card>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport {\r\n    Button,\r\n    ButtonGroup,\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogActions,\r\n    Slide\r\n} from '@material-ui/core';\r\nimport * as Icon from '@material-ui/icons';\r\nimport BCard from './BCard.js';\r\nimport ReactCardFlip from 'react-card-flip';\r\n\r\nexport default function DeckView(props) {\r\n    const [flipped, setFlipped] = useState(false);\r\n    const [selectedCard, setSelectedCard] = useState(0);\r\n    const [cardIn, setCardIn] = useState(true);\r\n    const [slideDirection, setSlideDirection] = useState(null);\r\n\r\n    const displayCard = () => selectedCard + 1;\r\n    const activeId = () => {\r\n        let card = props.deck.cards[selectedCard];\r\n        return card ? card.id : 0;\r\n    }\r\n\r\n    const lastCard = () => props.deck.cards.length - 1;\r\n\r\n    const isLastCard = selectedCard === props.deck.cards.length - 1;\r\n    const isFirstCard = selectedCard === 0;\r\n\r\n    const discreetFlip = (callback) => {\r\n        if (flipped) {\r\n            setFlipped(false);\r\n            callback();\r\n        } else {\r\n            callback();\r\n        }\r\n    }\r\n    const handleFlip = () => { setFlipped(!flipped); };\r\n    const handleCardChange = (content) => {\r\n        props.onCardChange(content, activeId(), flipped);\r\n    };\r\n\r\n    const handleAdvanceCard = () => {\r\n        setSlideDirection(\"right\");\r\n        setCardIn(false);\r\n        discreetFlip(() => setTimeout(() => {\r\n            setSlideDirection(\"left\");\r\n            setCardIn(true);\r\n            setSelectedCard(c => c < lastCard() ? \r\n                c + 1 : lastCard());\r\n        }, 230));\r\n    };\r\n    const handleReverseCard = () => {\r\n        setSlideDirection(\"left\");\r\n        setCardIn(false);\r\n        discreetFlip(() => setTimeout(() => {\r\n            setSlideDirection(\"right\");\r\n            setCardIn(true);\r\n            setSelectedCard(c => c > 0 ? c - 1 : 0);\r\n        }, 230));\r\n    };\r\n    const handleJumpToEnd = () => {\r\n        setSlideDirection(\"right\");\r\n        setCardIn(false);\r\n        discreetFlip(() => setTimeout(() => {\r\n            setSlideDirection(\"left\");\r\n            setCardIn(true);\r\n            setSelectedCard(props.deck.cards.length - 1);\r\n        }, 230));\r\n    };\r\n    const handleJumpToStart = () => {\r\n        setSlideDirection(\"left\");\r\n        setCardIn(false);\r\n        discreetFlip(() => setTimeout(() => {\r\n            setSlideDirection(\"right\");\r\n            setCardIn(true);\r\n            setSelectedCard(0);\r\n        }, 230));\r\n    };\r\n    const addCard = (frontContent, backContent) => {\r\n        setFlipped(false);\r\n        props.onAddCard(frontContent, backContent);\r\n        setSelectedCard(props.deck.cards.length - 1)\r\n    }\r\n    const handleAddCard = () => { addCard(\"\", \"\"); };\r\n    const handleDuplicateCard = () => {\r\n        addCard(props.deck.cards[selectedCard].front,\r\n            props.deck.cards[selectedCard].back);\r\n    };\r\n    const handleFlagToggle = () => {\r\n        if (props.flaggedOnly &&\r\n            props.deck.cards.length - 1 === selectedCard) {\r\n            setSelectedCard(c => c === 0 ? 0 : c - 1);\r\n        }\r\n        props.onFlag(activeId());\r\n    };\r\n    const handleFlaggedOnlyToggle = () => {\r\n        discreetFlip(() => setSelectedCard(0));\r\n        props.onFlaggedOnly();\r\n    };\r\n    const handleShuffleToggle = () => {\r\n        discreetFlip(() => setSelectedCard(0));\r\n        props.onShuffle();\r\n    }\r\n    const handleKeyPress = (event) => {\r\n        if (props.focus) {\r\n            switch (event.key) {\r\n                case \"ArrowLeft\":\r\n                    if (!isFirstCard) {\r\n                        handleReverseCard();\r\n                    }\r\n                    break;\r\n                case \"ArrowRight\":\r\n                    if (!isLastCard) {\r\n                        handleAdvanceCard();\r\n                    }\r\n                    break;\r\n                case \"ArrowUp\":\r\n                    if (!isFirstCard) {\r\n                        handleJumpToStart();\r\n                    }\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    if (!isLastCard) {\r\n                        handleJumpToEnd();\r\n                    }\r\n                    break;\r\n                case \" \":\r\n                    event.preventDefault();\r\n                    event.stopPropagation();\r\n                    handleFlip();\r\n                    break;\r\n                default: break;\r\n            }\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"keydown\", handleKeyPress);\r\n        return () => window.removeEventListener(\"keydown\", handleKeyPress);\r\n    });\r\n\r\n    const controls = (\r\n        <div className=\"DeckControls\">\r\n            <ButtonGroup>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    startIcon={<Icon.FirstPage />}\r\n                    disabled={isFirstCard}\r\n                    onClick={handleJumpToStart}\r\n                >\r\n                    First\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    startIcon={<Icon.ArrowBack />}\r\n                    disabled={isFirstCard}\r\n                    onClick={handleReverseCard}\r\n                >\r\n                    Back\r\n                </Button>\r\n            </ButtonGroup>\r\n            <ButtonGroup>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    startIcon={props.shuffled ?\r\n                        <Icon.CheckBox /> :\r\n                        <Icon.CheckBoxOutlineBlank />}\r\n                    disabled={props.deck.cards.length === 1}\r\n                    onClick={handleShuffleToggle}\r\n                >\r\n                    Shuffle\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    startIcon={props.flaggedOnly ?\r\n                        <Icon.CheckBox /> :\r\n                        <Icon.CheckBoxOutlineBlank />}\r\n                    disabled={props.deck.cards.filter(c => c.flagged).length < 1}\r\n                    onClick={handleFlaggedOnlyToggle}\r\n                >\r\n                    Flagged Only\r\n                </Button>\r\n            </ButtonGroup>\r\n            <ButtonGroup>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    endIcon={<Icon.ArrowForward />}\r\n                    disabled={isLastCard}\r\n                    onClick={handleAdvanceCard}\r\n                >\r\n                    Next\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    endIcon={<Icon.LastPage />}\r\n                    disabled={isLastCard}\r\n                    onClick={handleJumpToEnd}\r\n                >\r\n                    Last\r\n                </Button>\r\n            </ButtonGroup>\r\n            <Button\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                startIcon={<Icon.Add />}\r\n                onClick={handleAddCard}\r\n                disabled={props.flaggedOnly}\r\n            >\r\n                Add Card\r\n            </Button>\r\n        </div>\r\n    );\r\n\r\n    useEffect(() => {\r\n        setSelectedCard(0);\r\n        setFlipped(false);\r\n    }, [props.deck.id]);\r\n\r\n    return (\r\n        <div className=\"DeckView\">\r\n            <div className=\"CardSpace\">\r\n                <Slide \r\n                    in={cardIn}\r\n                    direction={slideDirection}>\r\n                    <div\r\n                        style={{height: \"100%\"}}>\r\n                    <ReactCardFlip\r\n                        isFlipped={flipped}\r\n                        flipDirection=\"vertical\"\r\n                        flipSpeedBackToFront={0.3}\r\n                        flipSpeedFrontToBack={0.3}\r\n                    >\r\n                        <BCard\r\n                            id={activeId() + \"-front\"}\r\n                            flipped={false}\r\n                            onEditorChange={handleCardChange}\r\n                            onFlip={handleFlip}\r\n                            onDuplicate={handleDuplicateCard}\r\n                            number={displayCard()}\r\n                            count={props.deck.cards.length}\r\n                            content={props.deck.cards[selectedCard]?.front}\r\n                            flagged={props.deck.cards[selectedCard]?.flagged}\r\n                            onFlag={handleFlagToggle}\r\n                            flaggedOnly={props.flaggedOnly}\r\n                        />\r\n                        <BCard\r\n                            id={activeId() + \"-back\"}\r\n                            flipped={true}\r\n                            onEditorChange={handleCardChange}\r\n                            onFlip={handleFlip}\r\n                            onAddCard={handleAddCard}\r\n                            onDuplicate={handleDuplicateCard}\r\n                            number={displayCard()}\r\n                            count={props.deck.cards.length}\r\n                            content={props.deck.cards[selectedCard]?.back}\r\n                            flagged={props.deck.cards[selectedCard]?.flagged}\r\n                            onFlag={handleFlagToggle}\r\n                            flaggedOnly={props.flaggedOnly}\r\n                        />\r\n                    </ReactCardFlip>\r\n                    </div>\r\n                </Slide>\r\n            </div>\r\n            {controls}\r\n        </div>\r\n    );\r\n}","import { Editor } from '@tinymce/tinymce-react';\r\nimport * as Material from '@material-ui/core';\r\nimport * as Icon from '@material-ui/icons';\r\nimport React, { useEffect, useState } from 'react';\r\nimport ReactHtmlParser from 'react-html-parser';\r\n\r\nexport function CardEdit(props) {\r\n    const [focused, setFocused] = useState(null);\r\n\r\n    const handleFocusOut = (event) => { \r\n        if (event.target.id === props.card.id) {\r\n            setFocused(null); \r\n        }\r\n    };\r\n    const handleFocusSide = (side) => { setFocused(side); };\r\n    const handleDummyFocus = () => { setFocused(\"front\"); }\r\n    const handleButtonsFocus = () => { setFocused(null); };\r\n    const handleEditorChange = (content, _editor, side) => {\r\n        if (content !== \"\" && content !== props.content) {\r\n            props.onChange(content, side);\r\n        }\r\n    };\r\n    const handleFlag = () => { props.onFlag(props.card.id); };\r\n    const handleClear = () => {\r\n        props.onChange(\"\", \"front\");\r\n        props.onChange(\"\", \"back\");\r\n    }\r\n    const handleDelete = () => { props.onDelete(props.card.id); };\r\n\r\n    useEffect(() => {\r\n        if (focused) {\r\n            try {\r\n            document.getElementById(props.card.id + \"-\" + focused)\r\n                .focus();\r\n            } catch (e) {}\r\n        }\r\n    }, [focused]);\r\n\r\n    useEffect(() => {\r\n        setFocused(null);\r\n    }, []);\r\n\r\n    return (\r\n        <div \r\n           className=\"EditCardContainer\"\r\n           onBlur={handleFocusOut}\r\n        >\r\n            <div id={props.card.id} className=\"EditCardFlex\">\r\n                <input \r\n                    id={props.card.id + \"-dummy\"} \r\n                    style={{position: 'absolute', opacity: 0}} \r\n                    onFocus={handleDummyFocus}\r\n                />\r\n                {[\"front\", \"back\"].map(side =>\r\n                    <Material.Card\r\n                        key={side}\r\n                        square\r\n                        elevation={3}\r\n                        className=\"EditCard\"\r\n                    >\r\n                        <Material.Typography\r\n                            style={{ color: \"#888\" }}\r\n                            variant=\"caption\"\r\n                        >\r\n                            {side.toUpperCase()}\r\n                        </Material.Typography>\r\n                        <div \r\n                            className=\"EditCardContent\"\r\n                            onClick={() => handleFocusSide(side)}\r\n                        >\r\n                            {focused ?\r\n                                <Editor\r\n                                    style={{ textAlign: \"center\" }}\r\n                                    id={props.card.id + \"-\" + side}\r\n                                    inline\r\n                                    onEditorChange={(content, editor) => handleEditorChange(content, editor, side)}\r\n                                    onKeyDown={(event) => event.stopPropagation()}\r\n                                    onKeyUp={(event) => event.preventDefault()}\r\n                                    value={props.card[side]}\r\n                                    init={{\r\n                                        menubar: false,\r\n                                        toolbar: 'undo redo | fontsizeselect | bold italic backcolor | ' +\r\n                                            'alignleft aligncenter alignright alignjustify | ' +\r\n                                            'bullist numlist outdent indent | removeformat',\r\n                                        content_style: 'body { font-family: Roboto; font-size: 18pt; text-align: center}'\r\n                                    }}\r\n                                /> :\r\n                                <div>\r\n                                    {ReactHtmlParser(props.card[side] || '<p style=\"color: #888;\">No content</p>')}\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                    </Material.Card>\r\n                )}\r\n            </div>\r\n            <div \r\n                className=\"EditControls\"\r\n                onFocus={handleButtonsFocus}\r\n            >\r\n                <Material.IconButton\r\n                    onClick={handleFlag}\r\n                    className={props.card.flagged ? \"FlagButtonActive\" : null}\r\n                >\r\n                    <Icon.Flag />\r\n                </Material.IconButton>\r\n                <Material.IconButton\r\n                    onClick={handleClear}\r\n                >\r\n                    <Icon.Backspace />\r\n                </Material.IconButton>\r\n                <Material.IconButton\r\n                    onClick={handleDelete}\r\n                >\r\n                    <Icon.Delete />\r\n                </Material.IconButton>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { CardEdit } from './CardEdit';\r\nimport { Button } from '@material-ui/core';\r\nimport { Add } from '@material-ui/icons';\r\n\r\nexport function GridView(props) {\r\n    const handleCardChange = (content, id, side) => {\r\n        props.onChange(content, id, side === \"back\");\r\n    };\r\n    const handleAddCard = () => { props.onAddCard(); };\r\n    const handleFlag = (id) => { props.onFlag(id); };\r\n    const handleDelete = (index) => { props.onDelete(index); };\r\n\r\n    return (\r\n        <div style={{marginBottom: \"80px\"}}>\r\n            {props.deck.cards.map((card, index) =>\r\n                <CardEdit\r\n                    key={card.id}\r\n                    card={card}\r\n                    onChange={(content, side) =>\r\n                        handleCardChange(content, card.id, side)}\r\n                    onFlag={handleFlag}\r\n                    onDelete={() => handleDelete(index)}\r\n                />\r\n            )}\r\n            <Button\r\n                style={{marginTop: \"40px\"}}\r\n                size=\"large\"\r\n                startIcon={<Add/>}\r\n                onClick={handleAddCard}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n            >\r\n                Add Card\r\n            </Button>\r\n        </div>);\r\n}","import React, { useState, useEffect } from 'react';\r\nimport * as Material from '@material-ui/core';\r\nimport * as Icon from '@material-ui/icons';\r\nimport './App.css';\r\nimport EmptyState from './components/EmptyState';\r\nimport DeckView from './components/DeckView';\r\nimport { GridView } from './components/GridView';\r\n\r\nfunction App() {\r\n  /********** STATES **********/\r\n  const [deck, setDeck] = useState(null);\r\n  const [drawer, setDrawer] = useState(false);\r\n  const [newDeckDialog, setNewDeckDialog] = useState(false);\r\n  const [duplicateDeckDialog, setDuplicateDeckDialog] = useState(false);\r\n  const [renameDeckDialog, setRenameDeckDialog] = useState(false);\r\n  const [deleteDeckDialog, setDeleteDeckDialog] = useState(false);\r\n  const [newDeckName, setNewDeckName] = useState('');\r\n  const [renameDeckName, setRenameDeckName] = useState('');\r\n  const [openNewDeck, setOpenNewDeck] = useState(false);\r\n  const [appMenu, setAppMenu] = useState(false);\r\n  const [appMenuAnchor, setAppMenuAnchor] = useState(null);\r\n  const [flaggedOnly, setFlaggedOnly] = useState(false);\r\n  const [shuffled, setShuffled] = useState(false);\r\n  const [editing, setEditing] = useState(false);\r\n\r\n\r\n  /********** CONSTANTS **********/\r\n  const freeView =\r\n    deck &&\r\n    !drawer &&\r\n    !newDeckDialog &&\r\n    !duplicateDeckDialog &&\r\n    !renameDeckDialog &&\r\n    !deleteDeckDialog;\r\n\r\n\r\n  /********** FUNCTIONS **********/\r\n  const uuid = () => {\r\n    return 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'.replace(/x/g, function (c) {\r\n      return (Math.random() * 16 | 0).toString(16);\r\n    });\r\n  };\r\n\r\n  const shuffle = (array) => {\r\n    var currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n    while (0 !== currentIndex) {\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n\r\n      temporaryValue = array[currentIndex];\r\n      array[currentIndex] = array[randomIndex];\r\n      array[randomIndex] = temporaryValue;\r\n    }\r\n\r\n    return array;\r\n  };\r\n\r\n  const allStorage = () => {\r\n    var storage = [],\r\n      keys = Object.keys(localStorage),\r\n      i = keys.length;\r\n\r\n    while (i--) {\r\n      if (keys[i] !== \"lastOpen\") {\r\n        storage.push(JSON.parse(localStorage.getItem(keys[i])));\r\n      }\r\n    }\r\n    return storage;\r\n  };\r\n\r\n  const formattedDate = (date) => {\r\n    return (new Date(date)).toLocaleString(\r\n      [], {\r\n      month: 'numeric',\r\n      day: 'numeric',\r\n      year: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    });\r\n  };\r\n\r\n  const writeDeck = (newDeck) => {\r\n    newDeck.modified = new Date();\r\n    setDeck(newDeck);\r\n    localStorage.setItem(newDeck.id, JSON.stringify(newDeck));\r\n  };\r\n\r\n  const addDeck = (deckName) => {\r\n    setFlaggedOnly(false);\r\n    var newId = uuid();\r\n    var newObj = {\r\n      name: newId,\r\n      content: {\r\n        id: newId,\r\n        name: deckName,\r\n        created: new Date(),\r\n        modified: new Date(),\r\n        cards: [\r\n          {\r\n            id: uuid(),\r\n            front: \"\",\r\n            back: \"\",\r\n            flagged: false\r\n          }\r\n        ]\r\n      }\r\n    }\r\n    localStorage.setItem(newObj.name, JSON.stringify(newObj.content));\r\n    handleDeckSelected(newObj.content);\r\n  };\r\n\r\n  const visibleCards = () => {\r\n    var visibleDeck = { ...deck }\r\n    if (flaggedOnly) {\r\n      visibleDeck.cards = deck.cards.filter(c =>\r\n        c.flagged);\r\n    }\r\n    if (shuffled) {\r\n      var cards = [...visibleDeck.cards];\r\n      visibleDeck.cards = shuffle(cards);\r\n    }\r\n    return visibleDeck;\r\n  };\r\n\r\n  /********** EFFECTS **********/\r\n  useEffect(() => {\r\n    setDeck(JSON.parse(localStorage.getItem(localStorage.getItem(\"lastOpen\"))));\r\n  }, []);\r\n\r\n  /********** EVENT HANDLERS **********/\r\n  const handleDrawerOpen = () => { setDrawer(true); };\r\n  const handleDrawerClose = () => { setDrawer(false); };\r\n  const handleNewDeck = () => {\r\n    setNewDeckDialog(true);\r\n    setAppMenu(false);\r\n  };\r\n  const handleDuplicateDeck = () => {\r\n    setDuplicateDeckDialog(true);\r\n    setAppMenu(false);\r\n  };\r\n  const handleNewDeckDialogClose = () => { setNewDeckDialog(false); };\r\n  const handleDuplicateDeckDialogClose = () => { setDuplicateDeckDialog(false); };\r\n  const handleNewDeckNameChange = (event) => {\r\n    var text = event.target.value;\r\n    text = text.substr(0, 20);\r\n    setNewDeckName(text);\r\n  };\r\n  const handleNewDeckConfirm = (event) => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    if (newDeckName.trim()) {\r\n      setNewDeckDialog(false);\r\n      addDeck(newDeckName.trim());\r\n      setNewDeckName('');\r\n    }\r\n  };\r\n  const handleDuplicateDeckConfirm = (event) => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    if (newDeckName.trim()) {\r\n      setDuplicateDeckDialog(false);\r\n      var newDeck = { ...deck };\r\n      newDeck.id = uuid();\r\n      newDeck.name = newDeckName.trim();\r\n      newDeck.created = formattedDate();\r\n      localStorage.setItem(newDeck.id, JSON.stringify(newDeck));\r\n      setNewDeckName('');\r\n      if (openNewDeck) { setDeck(newDeck); }\r\n    }\r\n  };\r\n  const handleDeckSelected = (deck) => {\r\n    setDrawer(false);\r\n    setDeck(JSON.parse(localStorage.getItem(deck.id)));\r\n    localStorage.setItem(\"lastOpen\", deck.id);\r\n  };\r\n  const handleCardChange = (content, id, flipped) => {\r\n    var tmpDeck = { ...deck };\r\n    if (flipped) {\r\n      tmpDeck.cards.find(c => c.id === id).back = content;\r\n    } else {\r\n      tmpDeck.cards.find(c => c.id === id).front = content;\r\n    }\r\n    writeDeck(tmpDeck);\r\n  };\r\n  const handleRenameDeck = () => {\r\n    setAppMenu(false);\r\n    setRenameDeckName(deck.name);\r\n    setRenameDeckDialog(true);\r\n  }\r\n  const handleRenameDeckDialogClose = () => {\r\n    setRenameDeckDialog(false);\r\n  }\r\n  const handleRenameDeckNameChanged = (event) => {\r\n    var text = event.target.value;\r\n    text = text.substr(0, 20);\r\n    setRenameDeckName(text);\r\n  }\r\n  const handleRenameDeckConfirm = (event) => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    if (renameDeckName.trim()) {\r\n      setRenameDeckDialog(false);\r\n      var newDeck = { ...deck };\r\n      newDeck.name = renameDeckName.trim();\r\n      writeDeck(newDeck);\r\n    }\r\n  }\r\n  const handleDeleteDeck = () => {\r\n    setAppMenu(false);\r\n    setDeleteDeckDialog(true);\r\n  }\r\n  const handleDeleteDeckDialogClose = () => {\r\n    setDeleteDeckDialog(false);\r\n  };\r\n  const handleDeleteDeckConfirm = () => {\r\n    setDeleteDeckDialog(false);\r\n    localStorage.removeItem(deck.id);\r\n    setDeck(null);\r\n  };\r\n  const handleAppMenuOpen = (event) => {\r\n    setAppMenuAnchor(event.currentTarget);\r\n    setAppMenu(true);\r\n  };\r\n  const handleAppMenuClose = () => { setAppMenu(false); };\r\n  const handleOpenNewDeckChange = () => {\r\n    setOpenNewDeck(!openNewDeck);\r\n  };\r\n  const handleAddCard = (front, back) => {\r\n    var tmpDeck = { ...deck };\r\n    tmpDeck.cards.push({\r\n      id: uuid(),\r\n      front: front,\r\n      back: back,\r\n      flagged: false\r\n    });\r\n    writeDeck(tmpDeck);\r\n  };\r\n  const handleDeleteCard = (index) => {\r\n    if (deck.cards.length === 1) {\r\n      handleDeleteDeckConfirm();\r\n    } else {\r\n      var tmpDeck = { ...deck };\r\n      tmpDeck.cards.splice(index, 1);\r\n      writeDeck(tmpDeck);\r\n    }\r\n  };\r\n  const handleFlagToggle = (id) => {\r\n    if (flaggedOnly && deck.cards.filter(c => c.flagged).length < 2) {\r\n      handleFlaggedOnlyToggle();\r\n    }\r\n    var tmpDeck = { ...deck };\r\n    tmpDeck.cards.find(c => c.id === id).flagged =\r\n      !deck.cards.find(c => c.id === id).flagged;\r\n    writeDeck(tmpDeck);\r\n  };\r\n  const handleFlaggedOnlyToggle = () => { setFlaggedOnly(f => !f); };\r\n  const handleShuffleToggle = () => { setShuffled(s => !s); };\r\n  const handleToggleEdit = () => { \r\n    setAppMenu(false);\r\n    setEditing(!editing); \r\n  };\r\n\r\n  /********** UI CONSTANTS **********/\r\n  const emptyDrawer = (\r\n    <div className=\"EmptyDrawer\">\r\n      <Material.Typography variant=\"h6\">No decks found</Material.Typography>\r\n    </div>\r\n  );\r\n\r\n  const deleteDeckDialogContent = (\r\n    <Material.Dialog open={deleteDeckDialog} onClose={handleDeleteDeckDialogClose}>\r\n      <Material.DialogTitle>Delete \"{deck ? deck.name : null}\"?</Material.DialogTitle>\r\n      <Material.DialogContent>\r\n        <Material.DialogContentText>\r\n          This deck will be deleted forever (a really long time).\r\n        </Material.DialogContentText>\r\n      </Material.DialogContent>\r\n      <Material.DialogActions>\r\n        <Material.Button onClick={handleDeleteDeckDialogClose}>Cancel</Material.Button>\r\n        <Material.Button color=\"secondary\" onClick={handleDeleteDeckConfirm}>Delete</Material.Button>\r\n      </Material.DialogActions>\r\n    </Material.Dialog>\r\n  );\r\n\r\n  const newDeckDialogContent = (\r\n    <Material.Dialog open={newDeckDialog} onClose={handleNewDeckDialogClose}>\r\n      <form onSubmit={handleNewDeckConfirm}>\r\n        <Material.DialogTitle>New Deck</Material.DialogTitle>\r\n        <Material.DialogContent>\r\n          <Material.TextField\r\n            autoFocus\r\n            label=\"Deck name\"\r\n            value={newDeckName}\r\n            onChange={handleNewDeckNameChange} />\r\n        </Material.DialogContent>\r\n        <Material.DialogActions>\r\n          <Material.Button onClick={handleNewDeckDialogClose}>Cancel</Material.Button>\r\n          <Material.Button\r\n            disabled={!newDeckName.trim()}\r\n            type=\"submit\"\r\n          >\r\n            Add\r\n            </Material.Button>\r\n        </Material.DialogActions>\r\n      </form>\r\n    </Material.Dialog>\r\n  );\r\n\r\n  const duplicateDeckDialogContent = (\r\n    <Material.Dialog open={duplicateDeckDialog} onClose={handleDuplicateDeckDialogClose}>\r\n      <form onSubmit={handleDuplicateDeckConfirm}>\r\n        <Material.DialogTitle>Duplicate \"{deck ? deck.name : null}\"</Material.DialogTitle>\r\n        <Material.DialogContent className=\"DialogGrid\">\r\n          <Material.TextField\r\n            autoFocus\r\n            label=\"Deck name\"\r\n            value={newDeckName}\r\n            onChange={handleNewDeckNameChange} />\r\n          <Material.FormControlLabel\r\n            control={\r\n              <Material.Checkbox\r\n                checked={openNewDeck}\r\n                onChange={handleOpenNewDeckChange}\r\n                color=\"primary\"\r\n              />\r\n            }\r\n            label={\"Open \" + (newDeckName ? newDeckName : \"new deck\")}\r\n          />\r\n        </Material.DialogContent>\r\n        <Material.DialogActions>\r\n          <Material.Button onClick={handleDuplicateDeckDialogClose}>Cancel</Material.Button>\r\n          <Material.Button\r\n            disabled={!newDeckName.trim()}\r\n            type=\"submit\"\r\n          >\r\n            Add\r\n            </Material.Button>\r\n        </Material.DialogActions>\r\n      </form>\r\n    </Material.Dialog>\r\n  );\r\n\r\n  const renameDeckDialogContent = (\r\n    <Material.Dialog open={renameDeckDialog} onClose={handleRenameDeckDialogClose}>\r\n      <form onSubmit={handleRenameDeckConfirm}>\r\n        <Material.DialogTitle>Rename Deck</Material.DialogTitle>\r\n        <Material.DialogContent>\r\n          <Material.TextField\r\n            autoFocus\r\n            label=\"Deck name\"\r\n            value={renameDeckName}\r\n            onChange={handleRenameDeckNameChanged} />\r\n        </Material.DialogContent>\r\n        <Material.DialogActions>\r\n          <Material.Button onClick={handleRenameDeckDialogClose}>Cancel</Material.Button>\r\n          <Material.Button\r\n            disabled={!renameDeckName.trim() || renameDeckName === deck.name}\r\n            type=\"submit\"\r\n          >\r\n            Rename\r\n            </Material.Button>\r\n        </Material.DialogActions>\r\n      </form>\r\n    </Material.Dialog>\r\n  );\r\n\r\n  const drawerContent = (\r\n    <div className=\"Drawer\">\r\n      <div className=\"DeckList\">\r\n        {allStorage() && allStorage().length > 0 ?\r\n          <Material.List>\r\n            {allStorage().sort((a, b) =>\r\n              (a.modified < b.modified) ? 1 : -1).map((d) =>\r\n                <Material.ListItem\r\n                  key={d.id}\r\n                  button\r\n                  onClick={() => handleDeckSelected(d)}\r\n                  selected={deck ? deck.id === d.id : false}\r\n                >\r\n                  <Material.ListItemText\r\n                    primary={d.name}\r\n                    secondary={formattedDate(d.modified)}\r\n                    primaryTypographyProps={{ noWrap: true }}\r\n                  />\r\n                </Material.ListItem>)}\r\n          </Material.List> :\r\n          emptyDrawer}\r\n      </div>\r\n      <Material.Button\r\n        className=\"DrawerButton\"\r\n        disableElevation\r\n        startIcon={<Icon.Add />}\r\n        onClick={handleNewDeck}\r\n        fullWidth\r\n        variant=\"contained\"\r\n      >\r\n        New Deck\r\n      </Material.Button>\r\n    </div>\r\n  );\r\n\r\n  const emptyState = (\r\n    <EmptyState\r\n      onClick={handleNewDeck}\r\n      button=\"New Deck\"\r\n      buttonIcon={<Icon.Add />}\r\n    >\r\n      Select a Deck from the drawer to get started.\r\n    </EmptyState>\r\n  );\r\n\r\n  const viewContent = (\r\n    deck ?\r\n      <DeckView\r\n        deck={visibleCards()}\r\n        onCardChange={handleCardChange}\r\n        onAddCard={handleAddCard}\r\n        onDeleteCard={handleDeleteCard}\r\n        onFlag={handleFlagToggle}\r\n        onFlaggedOnly={handleFlaggedOnlyToggle}\r\n        onShuffle={handleShuffleToggle}\r\n        flaggedOnly={flaggedOnly}\r\n        shuffled={shuffled}\r\n        focus={freeView}\r\n      /> : emptyState);\r\n\r\n  const editContent = (\r\n    deck ?\r\n      <GridView\r\n        deck={visibleCards()}\r\n        onChange={handleCardChange}\r\n        onAddCard={handleAddCard}\r\n        onDeleteCard={handleDeleteCard}\r\n        onFlag={handleFlagToggle}\r\n        onDelete={handleDeleteCard}\r\n      /> : emptyState);\r\n\r\n  const content = editing ? editContent : viewContent;\r\n\r\n  const appMenuContent = (\r\n    <Material.Menu\r\n      open={appMenu}\r\n      onClose={handleAppMenuClose}\r\n      anchorEl={appMenuAnchor}\r\n    >\r\n      <Material.MenuItem\r\n        onClick={handleNewDeck}\r\n      >\r\n        <Icon.Add className=\"GrayText\" />\r\n      Add Deck\r\n      </Material.MenuItem>\r\n      <Material.MenuItem\r\n        disabled={!deck}\r\n        onClick={handleDuplicateDeck}\r\n      >\r\n        <Icon.FilterNone className=\"GrayText\" />\r\n        Duplicate Deck\r\n      </Material.MenuItem>\r\n      <Material.MenuItem\r\n        disabled={!deck}\r\n        onClick={handleRenameDeck}\r\n      >\r\n        <Icon.Spellcheck className=\"GrayText\" />\r\n        Rename Deck\r\n      </Material.MenuItem>\r\n      <Material.MenuItem\r\n        disabled={!deck}\r\n        onClick={handleToggleEdit}\r\n      >\r\n      {editing ?\r\n        <Icon.Slideshow className=\"GrayText\" /> :\r\n        <Icon.Edit className=\"GrayText\" />\r\n      }\r\n      {editing ? \"View Deck\" : \"Edit Deck\"}\r\n      </Material.MenuItem>\r\n      <Material.MenuItem\r\n        disabled={!deck}\r\n        onClick={handleDeleteDeck}\r\n      >\r\n        <Icon.Delete className=\"GrayText\" />\r\n        Delete Deck\r\n      </Material.MenuItem>\r\n    </Material.Menu>\r\n  );\r\n\r\n  /********** RENDER **********/\r\n  return (\r\n    <div className=\"App\">\r\n      <Material.AppBar position=\"sticky\" elevation={3}>\r\n        <Material.Toolbar>\r\n          <div style={{\r\n            display: \"flex\", \r\n            width: \"100%\", \r\n            justifyContent: \"space-between\",\r\n            alignItems: \"center\"\r\n          }}>\r\n            <div \r\n              className=\"LeftAlign\"\r\n              style={{\r\n                display: \"flex\",\r\n                alignItems: \"center\"\r\n              }}\r\n            >\r\n              <Material.IconButton edge=\"start\" color=\"inherit\" onClick={handleDrawerOpen}>\r\n                <Icon.Menu />\r\n              </Material.IconButton>\r\n              <span className=\"TitleText\">\r\n                bCards\r\n              </span>\r\n            </div>\r\n            <Material.Typography className=\"TitleText CenterAlign\" variant=\"h6\" noWrap>\r\n              {deck ? deck.name : \"No deck loaded\"}\r\n            </Material.Typography>\r\n            <span className=\"AutoWidth RightAlign\">\r\n              <Material.IconButton\r\n                color=\"inherit\"\r\n                onClick={handleAppMenuOpen}\r\n              >\r\n                <Icon.MoreVert />\r\n              </Material.IconButton>\r\n            </span>\r\n          </div>\r\n        </Material.Toolbar>\r\n      </Material.AppBar>\r\n      <div className=\"Page\">\r\n        {content}\r\n      </div>\r\n      <React.Fragment>\r\n        {appMenuContent}\r\n        <Material.Drawer anchor=\"left\" open={drawer} onClose={handleDrawerClose}>\r\n          {drawerContent}\r\n        </Material.Drawer>\r\n        {newDeckDialogContent}\r\n        {deleteDeckDialogContent}\r\n        {duplicateDeckDialogContent}\r\n        {renameDeckDialogContent}\r\n      </React.Fragment>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorkerRegistration.register();"],"sourceRoot":""}