{"version":3,"sources":["components/BCard.js","components/DeckView.js","components/CardEdit.js","components/GridView.js","components/DashView.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["BCard","props","Card","elevation","square","className","Typography","variant","flipped","number","count","Button","flagged","startIcon","color","onClick","onFlag","disableElevation","ReactHtmlParser","content","onFlip","DeckView","useState","setFlipped","selectedCard","setSelectedCard","cardIn","setCardIn","slideDirection","setSlideDirection","displayCard","activeId","card","deck","cards","id","lastCard","length","isLastCard","isFirstCard","discreetFlip","callback","handleFlip","handleCardChange","onCardChange","handleAdvanceCard","setTimeout","c","handleReverseCard","handleJumpToEnd","handleJumpToStart","addCard","frontContent","backContent","onAddCard","handleDuplicateCard","front","back","handleFlagToggle","flaggedOnly","handleKeyPress","event","focus","key","preventDefault","stopPropagation","useEffect","window","addEventListener","removeEventListener","controls","Fragment","ButtonGroup","disabled","shuffled","onShuffle","filter","onFlaggedOnly","endIcon","Slide","in","direction","style","height","width","isFlipped","flipDirection","flipSpeedBackToFront","flipSpeedFrontToBack","onEditorChange","onDuplicate","Paper","CardEdit","focused","setFocused","handleFocus","side","document","getElementById","map","toUpperCase","textAlign","inline","editor","_editor","onChange","handleEditorChange","onKeyDown","onKeyUp","onFocus","onBlur","handleBlur","value","init","menubar","toolbar","content_style","title","tmpVal","onDelete","GridView","cardAdded","setCardAdded","handleFlag","scrollTo","body","scrollHeight","marginBottom","TextField","name","onRenameDeck","target","label","autoFocus","index","handleDelete","Add","SwapHoriz","onSwapAll","Slideshow","onViewCards","DashView","decks","sort","a","b","modified","onSelect","handleSelectDeck","overflow","display","flexDirection","justifyContent","alignItems","date","Date","toLocaleString","month","day","year","hour","minute","onNewDeck","App","setDeck","drawer","setDrawer","duplicateDeckDialog","setDuplicateDeckDialog","deleteDeckDialog","setDeleteDeckDialog","newDeckName","setNewDeckName","openNewDeck","setOpenNewDeck","setFlaggedOnly","setShuffled","editing","setEditing","appMenu","setAppMenu","appMenuAnchor","setAppMenuAnchor","freeView","uuid","replace","Math","random","toString","allStorage","storage","keys","Object","localStorage","i","push","JSON","parse","getItem","formattedDate","writeDeck","newDeck","setItem","stringify","addDeck","newId","newObj","created","handleDeckSelected","handleDuplicateDeck","handleDuplicateDeckDialogClose","handleDeleteDeck","handleDeleteDeckDialogClose","handleDeleteDeckConfirm","removeItem","handleDeleteCard","tmpDeck","splice","handleFlaggedOnlyToggle","find","f","handleToggleEdit","emptyDrawer","deleteDeckDialogContent","open","onClose","duplicateDeckDialogContent","onSubmit","trim","text","substr","control","checked","type","drawerContent","stg","d","button","selected","primary","secondary","primaryTypographyProps","noWrap","drawerData","fullWidth","emptyState","fontSize","size","viewContent","visibleDeck","array","temporaryValue","randomIndex","currentIndex","floor","shuffle","visibleCards","s","onDeleteCard","forEach","tmpContent","appActionsContent","opacity","edge","appMenuContent","anchorEl","position","data-name","xmlns","viewBox","cursor","fill","transform","currentTarget","anchor","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.0a31956a.chunk.js","sourcesContent":["import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport { Button, Typography } from '@material-ui/core';\r\nimport * as Icon from '@material-ui/icons';\r\nimport ReactHtmlParser from 'react-html-parser';\r\n\r\nexport default function BCard(props) {\r\n    const handleFlagToggle = () => { props.onFlag(); }\r\n\r\n    return (\r\n        <Card elevation={3} square className=\"Card\">\r\n            <div className=\"CardHeader BorderBox CenterVertical\">\r\n                <div className=\"EvenFlex LeftAlign\">\r\n                    <span>\r\n                        <Typography variant=\"subtitle1\" className=\"GrayText\">\r\n                            {props.flipped ? \"BACK\" : \"FRONT\"}\r\n                        </Typography>\r\n                    </span>\r\n                </div>\r\n                <div className=\"EvenFlex CenterAlign\">\r\n                    <span>\r\n                        <Typography variant=\"h6\">\r\n                            {props.number + \" of \" + props.count}\r\n                        </Typography>\r\n                    </span>\r\n                </div>\r\n                <div className=\"EvenFlex RightAlign\">\r\n                    <span>\r\n                        <Button\r\n                            className={props.flagged ? \"FlagButtonActive\" : \"\"}\r\n                            variant={props.flagged ? \"contained\" : \"text\"}\r\n                            startIcon={<Icon.Flag color=\"inherit\" />}\r\n                            onClick={handleFlagToggle}\r\n                            disableElevation\r\n                        >\r\n                            {props.flagged ? \"Flagged\" : \"Flag\"}\r\n                        </Button>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n            <div className=\"CardContent\">\r\n                <div>{ReactHtmlParser(props.content)}</div>\r\n            </div>\r\n            <div className=\"CardTools\">\r\n                <Button\r\n                    onClick={props.onFlip}\r\n                    startIcon={<Icon.Refresh />}\r\n                >\r\n                    Flip\r\n                    </Button>\r\n            </div>\r\n        </Card>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport {\r\n    Button,\r\n    ButtonGroup,\r\n    Slide,\r\n    Paper\r\n} from '@material-ui/core';\r\nimport * as Icon from '@material-ui/icons';\r\nimport BCard from './BCard.js';\r\nimport ReactCardFlip from 'react-card-flip';\r\n\r\nexport default function DeckView(props) {\r\n    const [flipped, setFlipped] = useState(false);\r\n    const [selectedCard, setSelectedCard] = useState(0);\r\n    const [cardIn, setCardIn] = useState(true);\r\n    const [slideDirection, setSlideDirection] = useState(null);\r\n\r\n    const displayCard = () => selectedCard + 1;\r\n    const activeId = () => {\r\n        let card = props.deck.cards[selectedCard];\r\n        return card ? card.id : 0;\r\n    }\r\n\r\n    const lastCard = () => props.deck.cards.length - 1;\r\n\r\n    const isLastCard = selectedCard === props.deck.cards.length - 1;\r\n    const isFirstCard = selectedCard === 0;\r\n\r\n    const discreetFlip = (callback) => {\r\n        if (flipped) {\r\n            setFlipped(false);\r\n            callback();\r\n        } else {\r\n            callback();\r\n        }\r\n    }\r\n    const handleFlip = () => { setFlipped(!flipped); };\r\n    const handleCardChange = (content) => {\r\n        props.onCardChange(content, activeId(), flipped);\r\n    };\r\n\r\n    const handleAdvanceCard = () => {\r\n        setSlideDirection(\"right\");\r\n        setCardIn(false);\r\n        discreetFlip(() => setTimeout(() => {\r\n            setSlideDirection(\"left\");\r\n            setCardIn(true);\r\n            setSelectedCard(c => c < lastCard() ?\r\n                c + 1 : lastCard());\r\n        }, 230));\r\n    };\r\n    const handleReverseCard = () => {\r\n        setSlideDirection(\"left\");\r\n        setCardIn(false);\r\n        discreetFlip(() => setTimeout(() => {\r\n            setSlideDirection(\"right\");\r\n            setCardIn(true);\r\n            setSelectedCard(c => c > 0 ? c - 1 : 0);\r\n        }, 230));\r\n    };\r\n    const handleJumpToEnd = () => {\r\n        setSlideDirection(\"right\");\r\n        setCardIn(false);\r\n        discreetFlip(() => setTimeout(() => {\r\n            setSlideDirection(\"left\");\r\n            setCardIn(true);\r\n            setSelectedCard(props.deck.cards.length - 1);\r\n        }, 230));\r\n    };\r\n    const handleJumpToStart = () => {\r\n        setSlideDirection(\"left\");\r\n        setCardIn(false);\r\n        discreetFlip(() => setTimeout(() => {\r\n            setSlideDirection(\"right\");\r\n            setCardIn(true);\r\n            setSelectedCard(0);\r\n        }, 230));\r\n    };\r\n    const addCard = (frontContent, backContent) => {\r\n        setFlipped(false);\r\n        props.onAddCard(frontContent, backContent);\r\n        setSelectedCard(props.deck.cards.length - 1)\r\n    }\r\n    const handleAddCard = () => { addCard(\"\", \"\"); };\r\n    const handleDuplicateCard = () => {\r\n        addCard(props.deck.cards[selectedCard].front,\r\n            props.deck.cards[selectedCard].back);\r\n    };\r\n    const handleFlagToggle = () => {\r\n        if (props.flaggedOnly &&\r\n            props.deck.cards.length - 1 === selectedCard) {\r\n            setSelectedCard(c => c === 0 ? 0 : c - 1);\r\n        }\r\n        props.onFlag(activeId());\r\n    };\r\n    const handleFlaggedOnlyToggle = () => {\r\n        discreetFlip(() => setSelectedCard(0));\r\n        props.onFlaggedOnly();\r\n    };\r\n    const handleShuffleToggle = () => {\r\n        discreetFlip(() => setSelectedCard(0));\r\n        props.onShuffle();\r\n    }\r\n    const handleKeyPress = (event) => {\r\n        if (props.focus) {\r\n            switch (event.key) {\r\n                case \"ArrowLeft\":\r\n                    if (!isFirstCard) {\r\n                        handleReverseCard();\r\n                    }\r\n                    break;\r\n                case \"ArrowRight\":\r\n                    if (!isLastCard) {\r\n                        handleAdvanceCard();\r\n                    }\r\n                    break;\r\n                case \"ArrowUp\":\r\n                    if (!isFirstCard) {\r\n                        handleJumpToStart();\r\n                    }\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    if (!isLastCard) {\r\n                        handleJumpToEnd();\r\n                    }\r\n                    break;\r\n                case \" \":\r\n                    event.preventDefault();\r\n                    event.stopPropagation();\r\n                    handleFlip();\r\n                    break;\r\n                default: break;\r\n            }\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"keydown\", handleKeyPress);\r\n        return () => window.removeEventListener(\"keydown\", handleKeyPress);\r\n    });\r\n\r\n    const controls = (\r\n        <React.Fragment>\r\n            <ButtonGroup>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    startIcon={<Icon.FirstPage />}\r\n                    disabled={isFirstCard}\r\n                    onClick={handleJumpToStart}\r\n                >\r\n                    First\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    startIcon={<Icon.ArrowBack />}\r\n                    disabled={isFirstCard}\r\n                    onClick={handleReverseCard}\r\n                >\r\n                    Back\r\n                </Button>\r\n            </ButtonGroup>\r\n            <ButtonGroup>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    startIcon={props.shuffled ?\r\n                        <Icon.CheckBox /> :\r\n                        <Icon.CheckBoxOutlineBlank />}\r\n                    disabled={props.deck.cards.length === 1}\r\n                    onClick={handleShuffleToggle}\r\n                >\r\n                    Shuffle\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    startIcon={props.flaggedOnly ?\r\n                        <Icon.CheckBox /> :\r\n                        <Icon.CheckBoxOutlineBlank />}\r\n                    disabled={props.deck.cards.filter(c => c.flagged).length < 1}\r\n                    onClick={handleFlaggedOnlyToggle}\r\n                >\r\n                    Flagged Only\r\n                </Button>\r\n            </ButtonGroup>\r\n            <ButtonGroup>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    endIcon={<Icon.ArrowForward />}\r\n                    disabled={isLastCard}\r\n                    onClick={handleAdvanceCard}\r\n                >\r\n                    Next\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    endIcon={<Icon.LastPage />}\r\n                    disabled={isLastCard}\r\n                    onClick={handleJumpToEnd}\r\n                >\r\n                    Last\r\n                </Button>\r\n            </ButtonGroup>\r\n        </React.Fragment>\r\n    );\r\n\r\n    useEffect(() => {\r\n        setSelectedCard(0);\r\n        setFlipped(false);\r\n    }, [props.deck.id]);\r\n\r\n    return (\r\n        <div className=\"DeckView\">\r\n            <div className=\"CardSpace\">\r\n                <Slide\r\n                    in={cardIn}\r\n                    direction={slideDirection}>\r\n                    <div\r\n                        style={{\r\n                            height: \"100%\",\r\n                            width: \"100%\"\r\n                        }}>\r\n                        <ReactCardFlip\r\n                            isFlipped={flipped}\r\n                            flipDirection=\"vertical\"\r\n                            flipSpeedBackToFront={0.3}\r\n                            flipSpeedFrontToBack={0.3}\r\n                        >\r\n                            <BCard\r\n                                id={activeId() + \"-front\"}\r\n                                flipped={false}\r\n                                onEditorChange={handleCardChange}\r\n                                onFlip={handleFlip}\r\n                                onDuplicate={handleDuplicateCard}\r\n                                number={displayCard()}\r\n                                count={props.deck.cards.length}\r\n                                content={props.deck.cards[selectedCard]?.front}\r\n                                flagged={props.deck.cards[selectedCard]?.flagged}\r\n                                onFlag={handleFlagToggle}\r\n                                flaggedOnly={props.flaggedOnly}\r\n                            />\r\n                            <BCard\r\n                                id={activeId() + \"-back\"}\r\n                                flipped={true}\r\n                                onEditorChange={handleCardChange}\r\n                                onFlip={handleFlip}\r\n                                onAddCard={handleAddCard}\r\n                                onDuplicate={handleDuplicateCard}\r\n                                number={displayCard()}\r\n                                count={props.deck.cards.length}\r\n                                content={props.deck.cards[selectedCard]?.back}\r\n                                flagged={props.deck.cards[selectedCard]?.flagged}\r\n                                onFlag={handleFlagToggle}\r\n                                flaggedOnly={props.flaggedOnly}\r\n                            />\r\n                        </ReactCardFlip>\r\n                    </div>\r\n                </Slide>\r\n            </div>\r\n            <Paper\r\n                className=\"Toolbar\"\r\n                elevation={3}\r\n            >\r\n                {controls}\r\n            </Paper>\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { Editor } from '@tinymce/tinymce-react';\r\nimport * as Material from '@material-ui/core';\r\nimport * as Icon from '@material-ui/icons';\r\n\r\nexport function CardEdit(props) {\r\n    const [focused, setFocused] = useState(null);\r\n\r\n    const handleEditorChange = (content, _editor, side) => {\r\n        props.onChange(content, side);\r\n    };\r\n    const handleFlag = () => { props.onFlag(props.card.id); };\r\n    const handleClear = () => {\r\n        props.onChange(\"\", \"front\");\r\n        props.onChange(\"\", \"back\");\r\n    }\r\n    const handleDelete = () => { props.onDelete(props.card.id); };\r\n    const handleFocus = (side) => { setFocused(side); };\r\n    const handleBlur = (side) => {\r\n        if (focused === side) {\r\n            setFocused(null);\r\n        }\r\n    };\r\n    const handleSwap = () => {\r\n        let tmpVal = props.card[\"front\"];\r\n        props.onChange(props.card[\"back\"], \"front\");\r\n        props.onChange(tmpVal, \"back\");\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (focused) {\r\n            document.getElementById(props.card.id + \"-\" + focused).focus();\r\n        }\r\n    }, [focused, props.card.id]);\r\n\r\n    return (\r\n        <div className=\"EditCardContainer\">\r\n            <div id={props.card.id} className=\"EditCardFlex\">\r\n                {[\"front\", \"back\"].map(side =>\r\n                    <Material.Card\r\n                        key={side}\r\n                        square\r\n                        elevation={3}\r\n                        className=\"EditCard\"\r\n                    >\r\n                        <Material.Typography\r\n                            style={{ color: \"#888\" }}\r\n                            variant=\"caption\"\r\n                        >\r\n                            {side.toUpperCase()}\r\n                        </Material.Typography>\r\n                        <div\r\n                            className=\"EditCardContent\"\r\n                            onClick={() => handleFocus(side)}\r\n                        >\r\n                            {focused !== side && (!props.card[side] || props.card[side] === \"\") ?\r\n                                <Material.Typography\r\n                                    variant=\"h5\"\r\n                                    className=\"CenterAbsolute GrayText\"\r\n                                >\r\n                                    No content\r\n                                </Material.Typography> :\r\n                                null}\r\n                            <Editor\r\n                                style={{ textAlign: \"center\" }}\r\n                                id={props.card.id + \"-\" + side}\r\n                                inline\r\n                                onEditorChange={(content, editor) => handleEditorChange(content, editor, side)}\r\n                                onKeyDown={(event) => event.stopPropagation()}\r\n                                onKeyUp={(event) => event.preventDefault()}\r\n                                onFocus={() => handleFocus(side)}\r\n                                onBlur={() => handleBlur(side)}\r\n                                value={props.card[side]}\r\n                                init={{\r\n                                    menubar: false,\r\n                                    toolbar: 'undo redo | fontsizeselect | bold italic backcolor | ' +\r\n                                        'alignleft aligncenter alignright alignjustify | ' +\r\n                                        'bullist numlist outdent indent | removeformat',\r\n                                    content_style: 'body { font-family: Roboto; font-size: 18pt; text-align: center}'\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </Material.Card>\r\n                )}\r\n            </div>\r\n            <div className=\"EditControls\">\r\n                <Material.Tooltip title=\"Flag card\">\r\n                    <Material.IconButton\r\n                        onClick={handleFlag}\r\n                        className={props.card.flagged ? \"FlagButtonActive\" : null}\r\n                    >\r\n                        <Icon.Flag />\r\n                    </Material.IconButton>\r\n                </Material.Tooltip>\r\n                <Material.Tooltip title=\"Swap content\">\r\n                    <Material.IconButton\r\n                        onClick={handleSwap}\r\n                    >\r\n                        <Icon.SwapHoriz />\r\n                    </Material.IconButton>\r\n                </Material.Tooltip>\r\n                <Material.Tooltip title=\"Clear content\">\r\n                    <Material.IconButton\r\n                        onClick={handleClear}\r\n                    >\r\n                        <Icon.Backspace />\r\n                    </Material.IconButton>\r\n                </Material.Tooltip>\r\n                <Material.Tooltip title=\"Delete card\">\r\n                    <Material.IconButton\r\n                        onClick={handleDelete}\r\n                    >\r\n                        <Icon.Delete />\r\n                    </Material.IconButton>\r\n                </Material.Tooltip> \r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { CardEdit } from './CardEdit';\r\nimport { Button, ButtonGroup, TextField, Paper} from '@material-ui/core';\r\nimport { Add, SwapHoriz, Slideshow } from '@material-ui/icons';\r\n\r\nexport default function GridView(props) {\r\n    const [cardAdded, setCardAdded] = useState(false);\r\n\r\n    const handleCardChange = (content, id, side) => {\r\n        props.onChange(content, id, side === \"back\");\r\n    };\r\n    const handleAddCard = () => { \r\n        props.onAddCard(); \r\n        setCardAdded(true);\r\n    };\r\n    const handleFlag = (id) => { props.onFlag(id); };\r\n    const handleDelete = (index) => { props.onDelete(index); };\r\n    const handleSwapAll = () => { props.onSwapAll(); };\r\n    const handleViewCards = () => { props.onViewCards(); };\r\n    const handleRenameDeck = (event) => { props.onRenameDeck(event.target.value); };\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0,document.body.scrollHeight);\r\n    }, [props.deck.cards.length]);\r\n\r\n    useEffect(() => {\r\n        if (cardAdded) {\r\n            let lastCard = props.deck.cards.length - 1\r\n            setCardAdded(false);\r\n            document\r\n                .getElementById(props.deck.cards[lastCard].id + \"-front\")\r\n                .focus();\r\n        }\r\n    }, [cardAdded, props.deck.cards]);\r\n\r\n    return (\r\n        <div style={{ marginBottom: \"80px\" }}>\r\n            <div id=\"deck-name-input-container\">\r\n                <TextField\r\n                    id=\"deck-name-input\"\r\n                    value={props.deck.name || \"\"}\r\n                    onChange={handleRenameDeck}\r\n                    variant=\"outlined\"\r\n                    label=\"Deck name\"\r\n                    autoFocus={!props.deck.name}\r\n                />\r\n            </div>\r\n            {props.deck.cards.map((card, index) =>\r\n                <CardEdit\r\n                    key={card.id}\r\n                    card={card}\r\n                    onChange={(content, side) =>\r\n                        handleCardChange(content, card.id, side)}\r\n                    onFlag={handleFlag}\r\n                    onDelete={() => handleDelete(index)}\r\n                />\r\n            )}\r\n            <Paper\r\n                className=\"Toolbar\"\r\n                elevation={3}\r\n            >\r\n                <ButtonGroup>\r\n                    <Button\r\n                        startIcon={<Add />}\r\n                        onClick={handleAddCard}\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                    >\r\n                        Add Card\r\n                    </Button>\r\n                    <Button\r\n                        startIcon={<SwapHoriz />}\r\n                        onClick={handleSwapAll}\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                    >\r\n                        Swap All\r\n                    </Button>\r\n                </ButtonGroup>\r\n                <Button\r\n                    startIcon={<Slideshow />}\r\n                    onClick={handleViewCards}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                >\r\n                    View Deck\r\n                </Button>\r\n            </Paper>\r\n        </div>);\r\n}","import React from 'react';\r\nimport * as Material from '@material-ui/core';\r\nimport * as Icon from '@material-ui/icons';\r\nimport ReactHtmlParser from 'react-html-parser';\r\n\r\nexport default function DashView(props) {\r\n  const formattedDate = (date) => {\r\n    return (new Date(date)).toLocaleString(\r\n      [], {\r\n      month: 'numeric',\r\n      day: 'numeric',\r\n      year: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    });\r\n  };\r\n\r\n  const handleSelectDeck = (deck) => {\r\n      props.onSelect(deck);\r\n  };\r\n  const handleNewDeck = () => { props.onNewDeck() }\r\n\r\n    return (\r\n        <div className=\"DashView\">\r\n            {props.decks.sort((a, b) =>\r\n                (a.modified < b.modified) ? 1 : -1)\r\n                .map(deck =>\r\n                    <div \r\n                        className=\"DashCardContainer\"\r\n                        onClick={() => handleSelectDeck(deck)}\r\n                    >\r\n                        <Material.Paper \r\n                            className=\"DashCard\" \r\n                            square\r\n                            elevation={3}\r\n                        >\r\n                            <div style={{\r\n                                overflow: \"hidden\",\r\n                                height: \"100%\",\r\n                                width: \"100%\",\r\n                                display: \"flex\",\r\n                                flexDirection: \"column\",\r\n                                justifyContent: \"center\",\r\n                                alignItems: \"center\"\r\n                            }}>\r\n                                {ReactHtmlParser(deck.cards[0].front)}\r\n                            </div>\r\n                        </Material.Paper>\r\n                        <Material.Typography variant=\"h5\">\r\n                            {deck.name || \"Untitled\"}\r\n                        </Material.Typography>\r\n                        <Material.Typography\r\n                            className=\"GrayText\"\r\n                            variant=\"subtitle1\"\r\n                        >\r\n                            {formattedDate(deck.modified)}\r\n                        </Material.Typography>\r\n                    </div>\r\n                )}\r\n            <div \r\n                className=\"DashCardContainer\"\r\n                onClick={handleNewDeck}\r\n            >\r\n                <div className=\"DashNewCard\">\r\n                    <span style={{\r\n                        display: \"flex\",\r\n                        alignItems: \"center\"\r\n                    }}>\r\n                        <Icon.Add />\r\n                        <Material.Typography variant=\"h5\">\r\n                            New deck\r\n                    </Material.Typography>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, { useState } from 'react';\r\nimport * as Material from '@material-ui/core';\r\nimport * as Icon from '@material-ui/icons';\r\nimport './App.css';\r\nimport DeckView from './components/DeckView';\r\nimport GridView from './components/GridView';\r\nimport DashView from './components/DashView';\r\n\r\n\r\nfunction App() {\r\n  /********** STATES **********/\r\n  const [deck, setDeck] = useState(null);\r\n  const [drawer, setDrawer] = useState(false);\r\n  const [duplicateDeckDialog, setDuplicateDeckDialog] = useState(false);\r\n  const [deleteDeckDialog, setDeleteDeckDialog] = useState(false);\r\n  const [newDeckName, setNewDeckName] = useState('');\r\n  const [openNewDeck, setOpenNewDeck] = useState(false);\r\n  const [flaggedOnly, setFlaggedOnly] = useState(false);\r\n  const [shuffled, setShuffled] = useState(false);\r\n  const [editing, setEditing] = useState(false);\r\n  const [appMenu, setAppMenu] = useState(false);\r\n  const [appMenuAnchor, setAppMenuAnchor] = useState(null);\r\n\r\n\r\n  /********** CONSTANTS **********/\r\n  const freeView =\r\n    deck &&\r\n    !drawer &&\r\n    !duplicateDeckDialog &&\r\n    !deleteDeckDialog;\r\n\r\n\r\n  /********** FUNCTIONS **********/\r\n  const uuid = () => {\r\n    return 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'\r\n      .replace(/x/g, function (c) {\r\n        return (Math.random() * 16 | 0).toString(16);\r\n      });\r\n  };\r\n\r\n  const shuffle = (array) => {\r\n    var currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n    while (0 !== currentIndex) {\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n\r\n      temporaryValue = array[currentIndex];\r\n      array[currentIndex] = array[randomIndex];\r\n      array[randomIndex] = temporaryValue;\r\n    }\r\n\r\n    return array;\r\n  };\r\n\r\n  const allStorage = () => {\r\n    var storage = [],\r\n      keys = Object.keys(localStorage),\r\n      i = keys.length;\r\n\r\n    while (i--) {\r\n      if (keys[i] !== \"lastOpen\") {\r\n        storage.push(JSON.parse(localStorage.getItem(keys[i])));\r\n      }\r\n    }\r\n    return storage;\r\n  };\r\n\r\n  const formattedDate = (date) => {\r\n    return (new Date(date)).toLocaleString(\r\n      [], {\r\n      month: 'numeric',\r\n      day: 'numeric',\r\n      year: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    });\r\n  };\r\n\r\n  const writeDeck = (newDeck) => {\r\n    newDeck.modified = new Date();\r\n    setDeck(newDeck);\r\n    localStorage.setItem(newDeck.id, JSON.stringify(newDeck));\r\n  };\r\n\r\n  const addDeck = () => {\r\n    var newId = uuid();\r\n    var newObj = {\r\n      name: newId,\r\n      content: {\r\n        id: newId,\r\n        created: new Date(),\r\n        modified: new Date(),\r\n        cards: [\r\n          {\r\n            id: uuid(),\r\n            front: \"\",\r\n            back: \"\",\r\n            flagged: false\r\n          }\r\n        ]\r\n      }\r\n    }\r\n    localStorage.setItem(newId, JSON.stringify(newObj.content));\r\n    handleDeckSelected(newObj.content);\r\n    setAppMenu(false);\r\n  };\r\n\r\n  const visibleCards = () => {\r\n    if (deck) {\r\n      let visibleDeck = { ...deck }\r\n      if (flaggedOnly) {\r\n        visibleDeck.cards = deck.cards.filter(c =>\r\n          c.flagged);\r\n      }\r\n      if (shuffled) {\r\n        let cards = [...visibleDeck.cards];\r\n        visibleDeck.cards = shuffle(cards);\r\n      }\r\n      return visibleDeck;\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  /********** EVENT HANDLERS **********/\r\n  const handleDrawerOpen = () => { setDrawer(true); };\r\n  const handleDrawerClose = () => { setDrawer(false); };\r\n  const handleDuplicateDeck = () => {\r\n    setDuplicateDeckDialog(true);\r\n    setAppMenu(false);\r\n  };\r\n  const handleDuplicateDeckDialogClose = () => { setDuplicateDeckDialog(false); };\r\n  const handleNewDeckNameChange = (event) => {\r\n    var text = event.target.value;\r\n    text = text.substr(0, 20);\r\n    setNewDeckName(text);\r\n  };\r\n  const handleDuplicateDeckConfirm = (event) => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    if (newDeckName.trim()) {\r\n      setDuplicateDeckDialog(false);\r\n      var newDeck = { ...deck };\r\n      newDeck.id = uuid();\r\n      newDeck.name = newDeckName.trim();\r\n      newDeck.created = formattedDate();\r\n      localStorage.setItem(newDeck.id, JSON.stringify(newDeck));\r\n      setNewDeckName('');\r\n      if (openNewDeck) { setDeck(newDeck); }\r\n    }\r\n  };\r\n  const handleDeckSelected = (deck) => {\r\n    setEditing(true);\r\n    setFlaggedOnly(false);\r\n    setShuffled(false);\r\n    setDrawer(false);\r\n    setDeck(JSON.parse(localStorage.getItem(deck.id)));\r\n  };\r\n  const handleCardChange = (content, id, flipped) => {\r\n    let tmpDeck = { ...deck };\r\n    if (flipped) {\r\n      tmpDeck.cards.find(c => c.id === id).back = content;\r\n    } else {\r\n      tmpDeck.cards.find(c => c.id === id).front = content;\r\n    }\r\n    writeDeck(tmpDeck);\r\n  };\r\n  const handleRenameDeck = (name) => {\r\n    let tmpDeck = { ...deck };\r\n    tmpDeck.name = name.substr(0, 20);\r\n    writeDeck(tmpDeck);\r\n  }\r\n  const handleDeleteDeck = () => {\r\n    setDeleteDeckDialog(true);\r\n    setAppMenu(false);\r\n  }\r\n  const handleDeleteDeckDialogClose = () => {\r\n    setDeleteDeckDialog(false);\r\n  };\r\n  const handleDeleteDeckConfirm = () => {\r\n    setDeleteDeckDialog(false);\r\n    localStorage.removeItem(deck.id);\r\n    setDeck(null);\r\n  };\r\n  const handleOpenNewDeckChange = () => {\r\n    setOpenNewDeck(!openNewDeck);\r\n  };\r\n  const handleAddCard = (front, back) => {\r\n    var tmpDeck = { ...deck };\r\n    tmpDeck.cards.push({\r\n      id: uuid(),\r\n      front: front,\r\n      back: back,\r\n      flagged: false\r\n    });\r\n    writeDeck(tmpDeck);\r\n  };\r\n  const handleDeleteCard = (index) => {\r\n    if (deck.cards.length === 1) {\r\n      handleDeleteDeckConfirm();\r\n    } else {\r\n      var tmpDeck = { ...deck };\r\n      tmpDeck.cards.splice(index, 1);\r\n      writeDeck(tmpDeck);\r\n    }\r\n  };\r\n  const handleFlagToggle = (id) => {\r\n    if (flaggedOnly && deck.cards.filter(c => c.flagged).length < 2) {\r\n      handleFlaggedOnlyToggle();\r\n    }\r\n    var tmpDeck = { ...deck };\r\n    tmpDeck.cards.find(c => c.id === id).flagged =\r\n      !deck.cards.find(c => c.id === id).flagged;\r\n    writeDeck(tmpDeck);\r\n  };\r\n  const handleFlaggedOnlyToggle = () => { setFlaggedOnly(f => !f); };\r\n  const handleShuffleToggle = () => { setShuffled(s => !s); };\r\n  const handleToggleEdit = () => { \r\n    setEditing(!editing);\r\n    setAppMenu(false); \r\n  };\r\n  const handleSwapAll = () => {\r\n    let tmpDeck = { ...deck };\r\n    tmpDeck.cards.forEach(card => {\r\n      let tmpContent = card.front;\r\n      card.front = card.back;\r\n      card.back = tmpContent;\r\n    });\r\n    writeDeck(tmpDeck);\r\n  };\r\n  const handleAppMenuOpen = (event) => {\r\n    setAppMenuAnchor(event.currentTarget);\r\n    setAppMenu(true);\r\n  };\r\n  const handleAppMenuClose = () => { setAppMenu(false); };\r\n  const handleHome = () => { setDeck(null); };\r\n\r\n  /********** UI CONSTANTS **********/\r\n  const emptyDrawer = (\r\n    <div className=\"EmptyDrawer\">\r\n      <Material.Typography variant=\"h6\">No decks found</Material.Typography>\r\n    </div>\r\n  );\r\n\r\n  const deleteDeckDialogContent = (\r\n    <Material.Dialog open={deleteDeckDialog} onClose={handleDeleteDeckDialogClose}>\r\n      <Material.DialogTitle>\r\n        Delete \"{deck ? deck.name || \"Untitled\" : null}\"?\r\n      </Material.DialogTitle>\r\n      <Material.DialogContent>\r\n        <Material.DialogContentText>\r\n          This deck will be deleted forever (a really long time).\r\n        </Material.DialogContentText>\r\n      </Material.DialogContent>\r\n      <Material.DialogActions>\r\n        <Material.Button onClick={handleDeleteDeckDialogClose}>Cancel</Material.Button>\r\n        <Material.Button color=\"secondary\" onClick={handleDeleteDeckConfirm}>Delete</Material.Button>\r\n      </Material.DialogActions>\r\n    </Material.Dialog>\r\n  );\r\n\r\n  const duplicateDeckDialogContent = (\r\n    <Material.Dialog open={duplicateDeckDialog} onClose={handleDuplicateDeckDialogClose}>\r\n      <form onSubmit={handleDuplicateDeckConfirm}>\r\n        <Material.DialogTitle>\r\n          Duplicate \"{deck ? deck.name || \"Untitled\" : null}\"\r\n        </Material.DialogTitle>\r\n        <Material.DialogContent className=\"DialogGrid\">\r\n          <Material.TextField\r\n            autoFocus\r\n            label=\"Deck name\"\r\n            value={newDeckName}\r\n            onChange={handleNewDeckNameChange} />\r\n          <Material.FormControlLabel\r\n            control={\r\n              <Material.Checkbox\r\n                checked={openNewDeck}\r\n                onChange={handleOpenNewDeckChange}\r\n                color=\"primary\"\r\n              />\r\n            }\r\n            label={\"Open \" + (newDeckName ? newDeckName : \"new deck\")}\r\n          />\r\n        </Material.DialogContent>\r\n        <Material.DialogActions>\r\n          <Material.Button onClick={handleDuplicateDeckDialogClose}>Cancel</Material.Button>\r\n          <Material.Button\r\n            disabled={!newDeckName.trim()}\r\n            type=\"submit\"\r\n          >\r\n            Add\r\n            </Material.Button>\r\n        </Material.DialogActions>\r\n      </form>\r\n    </Material.Dialog>\r\n  );\r\n\r\n  const drawerData = () => {\r\n    let stg = allStorage();\r\n    if (stg && stg.length > 0) {\r\n      return (\r\n        <Material.List>\r\n          {stg.sort((a, b) =>\r\n            (a.modified < b.modified) ? 1 : -1).map((d) =>\r\n              <Material.ListItem\r\n                key={d.id}\r\n                button\r\n                onClick={() => handleDeckSelected(d)}\r\n                selected={deck ? deck.id === d.id : false}\r\n              >\r\n                <Material.ListItemText\r\n                  primary={d.name || \"Untitled\"}\r\n                  secondary={formattedDate(d.modified)}\r\n                  primaryTypographyProps={{ noWrap: true }}\r\n                />\r\n              </Material.ListItem>)}\r\n        </Material.List>);\r\n    } else {\r\n      return emptyDrawer;\r\n    }\r\n  }\r\n\r\n  const drawerContent = (\r\n    <div className=\"Drawer\">\r\n      <div className=\"DeckList\">\r\n        {drawerData()}\r\n      </div>\r\n      <Material.Button\r\n        className=\"DrawerButton\"\r\n        disableElevation\r\n        startIcon={<Icon.Add />}\r\n        onClick={addDeck}\r\n        fullWidth\r\n        variant=\"contained\"\r\n      >\r\n        New Deck\r\n      </Material.Button>\r\n    </div>\r\n  );\r\n\r\n  const emptyState = (\r\n    <div className=\"EmptyState\">\r\n      <Icon.Search style={{ fontSize: 200 }} />\r\n      <Material.Typography\r\n        variant=\"h6\"\r\n      >\r\n        You don't have any decks yet.\r\n      </Material.Typography>\r\n      <Material.Button\r\n        variant=\"contained\"\r\n        onClick={addDeck}\r\n        color=\"primary\"\r\n        size=\"large\"\r\n        startIcon={<Icon.Add />}\r\n      >\r\n        New Deck\r\n      </Material.Button>\r\n    </div>\r\n  );\r\n\r\n  const viewContent = (\r\n    <DeckView\r\n      deck={visibleCards()}\r\n      onFlag={handleFlagToggle}\r\n      onFlaggedOnly={handleFlaggedOnlyToggle}\r\n      onShuffle={handleShuffleToggle}\r\n      flaggedOnly={flaggedOnly}\r\n      shuffled={shuffled}\r\n      focus={freeView}\r\n    />);\r\n\r\n  const editContent = (\r\n    <GridView\r\n      deck={deck}\r\n      onChange={handleCardChange}\r\n      onAddCard={handleAddCard}\r\n      onDeleteCard={handleDeleteCard}\r\n      onFlag={handleFlagToggle}\r\n      onDelete={handleDeleteCard}\r\n      onSwapAll={handleSwapAll}\r\n      onViewCards={handleToggleEdit}\r\n      onRenameDeck={handleRenameDeck}\r\n    />);\r\n\r\n  const content = deck ?\r\n    editing ? editContent : viewContent :\r\n    allStorage() && allStorage().length > 0 ?\r\n      (<DashView\r\n        decks={allStorage()}\r\n        onSelect={handleDeckSelected}\r\n        onNewDeck={addDeck}\r\n      />) : emptyState;\r\n\r\n  const appActionsContent = (\r\n    <div>\r\n      <Material.Tooltip title=\"Add deck\">\r\n        <Material.IconButton\r\n          onClick={addDeck}\r\n        >\r\n          <Icon.AddCircle style={{ color: \"#fff\" }} />\r\n        </Material.IconButton>\r\n      </Material.Tooltip>\r\n      <Material.Tooltip title={editing ? \"View deck\" : \"Edit deck\"}>\r\n        <Material.IconButton\r\n          disabled={!deck}\r\n          onClick={handleToggleEdit}\r\n        >\r\n          {editing ?\r\n            <Icon.Slideshow style={{\r\n              color: \"#fff\",\r\n              opacity: deck ? 1 : 0.5\r\n            }} /> :\r\n            <Icon.Edit style={{\r\n              color: \"#fff\",\r\n              opacity: deck ? 1 : 0.5\r\n            }} />\r\n          }\r\n        </Material.IconButton>\r\n      </Material.Tooltip>\r\n      <Material.Tooltip title=\"Duplicate deck\">\r\n        <Material.IconButton\r\n          disabled={!deck}\r\n          onClick={handleDuplicateDeck}\r\n        >\r\n          <Icon.FilterNone style={{\r\n            color: \"#fff\",\r\n            opacity: deck ? 1 : 0.5\r\n          }} />\r\n        </Material.IconButton>\r\n      </Material.Tooltip>\r\n      <Material.Tooltip title=\"Delete deck\">\r\n        <Material.IconButton\r\n          disabled={!deck}\r\n          onClick={handleDeleteDeck}\r\n          edge=\"end\"\r\n        >\r\n          <Icon.Delete style={{\r\n            color: \"#fff\",\r\n            opacity: deck ? 1 : 0.5\r\n          }} />\r\n        </Material.IconButton>\r\n      </Material.Tooltip>\r\n    </div>\r\n  );\r\n\r\n  const appMenuContent = (\r\n    <Material.Menu\r\n      open={appMenu}\r\n      onClose={handleAppMenuClose}\r\n      anchorEl={appMenuAnchor}\r\n    >\r\n      <Material.MenuItem\r\n        onClick={addDeck}\r\n      >\r\n        <Icon.Add className=\"GrayText\" />\r\n    Add deck\r\n    </Material.MenuItem>\r\n      <Material.MenuItem\r\n        disabled={!deck}\r\n        onClick={handleToggleEdit}\r\n      >\r\n        {editing ?\r\n          <Icon.Slideshow className=\"GrayText\" /> :\r\n          <Icon.Edit className=\"GrayText\" />\r\n        }\r\n        {editing ? \"View deck\" : \"Edit deck\"}\r\n      </Material.MenuItem>\r\n      <Material.MenuItem\r\n        disabled={!deck}\r\n        onClick={handleDuplicateDeck}\r\n      >\r\n        <Icon.FilterNone className=\"GrayText\" />\r\n      Duplicate deck\r\n    </Material.MenuItem>\r\n      <Material.MenuItem\r\n        disabled={!deck}\r\n        onClick={handleDeleteDeck}\r\n      >\r\n        <Icon.Delete className=\"GrayText\" />\r\n      Delete deck\r\n    </Material.MenuItem>\r\n    </Material.Menu>\r\n  );\r\n\r\n  /********** RENDER **********/\r\n  return (\r\n    <div className=\"App\">\r\n      <Material.AppBar position=\"sticky\" elevation={3}>\r\n        <Material.Toolbar>\r\n          <div style={{\r\n            display: \"flex\",\r\n            width: \"100%\",\r\n            alignItems: \"center\"\r\n          }}>\r\n            <div className=\"EvenFlex\">\r\n              <span>\r\n                <div\r\n                  className=\"LeftAlign\"\r\n                  style={{\r\n                    display: \"flex\",\r\n                    alignItems: \"center\"\r\n                  }}\r\n                >\r\n                  <Material.Tooltip title=\"View decks\">\r\n                    <Material.IconButton edge=\"start\" color=\"inherit\" onClick={handleDrawerOpen}>\r\n                      <Icon.Menu />\r\n                    </Material.IconButton>\r\n                  </Material.Tooltip>\r\n                  <svg\r\n                    id=\"header-logo\"\r\n                    data-name=\"header-logo\"\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    viewBox=\"0 0 909.4 688.25\"\r\n                    height=\"40\"\r\n                    width=\"40\"\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={handleHome}\r\n                  >\r\n                    <path\r\n                      style={{ fill: \"#fff\" }}\r\n                      d=\"M44.82,165.12H154.75V396.39c12.48-8.72,53.51-56.91,\r\n                        156.09-56.91,100.43,0,169.25,72.32,169.25,72.32l-45.38,\r\n                        78.65S398.57,449.36,362,439.81c-61.18-16-128.14,3.52-170.91,\r\n                        49.25-42,44.88-49.6,97.87-29.4,160.62,19.6,60.9,74.94,90,\r\n                        140.11,93.27,68.67,3.41,153.1-53,154-163.6C457,437.72,592,\r\n                        322.18,733.56,335.41,843.48,343,919.35,400.65,953.11,\r\n                        493.52a25,25,0,0,1,.95,3.23c-39.13,\r\n                        0-113.67-.29-113.67-.29s-55.6-97.92-172.26-60.59C610.06,\r\n                        454.45,566.22,509.24,566.22,575c0,66.47-10.25,102.51-37.5,\r\n                        149-58.11,99.15-163.57,136-244.39,128.45C150,839.79,67.9,\r\n                        736.2,49.8,645.27c-3-15.17-5-60.47-5-74.3Z\"\r\n                      transform=\"translate(-44.82 -165.12)\"\r\n                    />\r\n                    <path\r\n                      style={{ fill: \"#fff\" }}\r\n                      d=\"M593.87,684.29c11,10.31,57.78,69.22,129.09,69,74.66-.2,\r\n                        116.34-63.12,116.34-63.12s80.33-.44,114.84.14c2.31,0-50.27,\r\n                        163-232.29,163-121.29,0-186-86.08-186-86.08S592.89,685.89,\r\n                        593.87,684.29Z\"\r\n                      transform=\"translate(-44.82 -165.12)\"\r\n                    />\r\n                  </svg>\r\n                </div>\r\n              </span>\r\n            </div>\r\n            <div className=\"EvenFlex\">\r\n              <span>\r\n                <Material.Typography className=\"TitleText CenteredFlex\" variant=\"h6\" noWrap>\r\n                  {deck ? deck.name || \"Untitled\" : null}\r\n                </Material.Typography>\r\n              </span>\r\n            </div>\r\n            <div className=\"EvenFlex\">\r\n              <span className=\"AutoWidth RightAlign\">\r\n                <span id=\"app-actions\">\r\n                  {appActionsContent}\r\n                </span>\r\n                <span>\r\n                  <Material.IconButton\r\n                    id=\"app-menu\"\r\n                    onClick={handleAppMenuOpen}\r\n                    edge=\"end\"\r\n                  >\r\n                    <Icon.MoreVert style={{ color: \"#fff\" }} />\r\n                  </Material.IconButton>\r\n                </span>\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </Material.Toolbar>\r\n      </Material.AppBar>\r\n      <div className=\"Page\">\r\n        {content}\r\n      </div>\r\n      <React.Fragment>\r\n        <Material.Drawer anchor=\"left\" open={drawer} onClose={handleDrawerClose}>\r\n          {drawerContent}\r\n        </Material.Drawer>\r\n        {deleteDeckDialogContent}\r\n        {duplicateDeckDialogContent}\r\n        {appMenuContent}\r\n      </React.Fragment>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorkerRegistration.register();"],"sourceRoot":""}